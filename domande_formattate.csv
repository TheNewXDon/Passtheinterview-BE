1,Qual è la differenza tra JDK e JRE?,"JRE (Java Runtime Environment), software che contiene la JVM. La JVM non può essere scaricata singolarmente. JDK (Java Development Kit), software che contiene gli strumenti necessari al programmatore per poter sviluppare codice Java.  Tra le altre cose, include anche JRE."
2,Cos'è Java Virtual Machine (JVM)?,Java Virtual Machine (JVM) è una macchina virtuale che serve per eseguire il bytecode  dei programmi Java. Per ogni tipo di macchina esiste una JVM dedicata.
3,Perché Java è diverso dalla maggior parte di altri linguaggi?,Java è un linguaggio indipendente dalla piattaforma. Il compilatore Java converte il  codice sorgente in bytecode che può essere interpretato da JVM. Esiste una  JVM  per quasi tutte le piattaforme popolari nel mondo. Perciò un codice scritto in Java può essere eseguito su qualsiasi macchina.
4,Quali sono i principi fondamentali della Programmazione Orientata agli Oggetti?,"I principi fondamentali della programmazione orientata agli oggetti (OOPS) sono: Astrazione, Incapsulamento, Eredità e Polimorfismo"
5,Che cos’è un costruttore?,Un costruttore è un metodo speciale che serve per creare istanze della classe in cui è definito. Una classe può avere più costruttori. Ogni costruttore deve avere lo stesso nome della classe a cui appartiene. Non possono esistere due costruttori con gli stessi parametri in ingresso.
6,Che cos’è il costruttore di default?,Un costruttore che non ha nessun argomento è detto costruttore di default.
7,Cosa significa la keyword “this”?,"La parola chiave this in Java viene utilizzata per riferirsi, all’interno di un metodo o di un costruttore, agli attributi o metodi locali."
8,Spiegare il concetto di Eredità?,L’ereditarietà è la caratteristica che mette in relazione più classi che hanno caratteristiche comuni. In Java viene realizzata tramite le parole chiavi extends e implements.
9,Qual è la super-classe di tutti le classi?,La classe Object è la super-classe di tutte le classi.
10,Quando viene lanciata la NullPointerException?,Se proviamo ad accedere a un metodo (o una variabile) su un oggetto nullo viene lanciata la NullPointerException.
11,Cosa significa la keyword “super”?,"La parola chiave super è utilizzata in Java per riferirsi agli elementi della superclasse. Come per l’operatore this, anche super, viene utilizzato sia per le variabili (super.variabile) che per invocare altri metodi, tra cui anche il costruttore della classe padre."
12,Perché usiamo una variabile statica?,"Una variabile statica è condivisa da tutte le istanze della classe, ossia è una variabile globale comune a tutti gli oggetti di quella classe. Di conseguenza, se un'istanza modifica una variabile statica, questa modifica sarà visibile da tutte le altre istanze dello stesso tipo."
13,Cosa sono i metodi statici?,"Un metodo statico è un metodo legato alla classe, non all’istanza. Viene usato quando si ha necessita di creare una operazione che non usa dati specifici di una istanza. Per rendere un metodo statico è sufficiente inserire la parola chiave static nella sua dichiarazione."
14,In quale scenario viene usato un blocco statico?,"I blocchi statici vengono, in genere, utilizzati per inizializzare le variabili membro statiche della classe. Il blocco statico viene eseguito prima dell'esecuzione del main. A volte, possiamo sostituire il blocco statico con un metodo statico."
15,Qual è la differenza tra metodo statico e metodo di istanza?,"Spesso è necessario definire un comportamento per una classe che non è dipendente dalle variabili membro di un oggetto. Tale comportamento è inserito in un metodo statico.  Viceversa, se c'è un comportamento che dipende dalle variabili membro di un oggetto, non lo contrassegniamo statico ma rimane un normale metodo di istanza. Per invocare un metodo statico, non è necessario creare un oggetto, ma è sufficiente il nome della classe.  Per invocare un metodo di istanza, dobbiamo creare prima un oggetto. Non è possibile accedere alle variabili membro dell'istanza con un metodo statico, ma un metodo di istanza può chiamare sia variabili di istanza che statiche. "
16,Cosa significa overloading?,"In Java, una classe può avere più metodi con lo stesso nome ma argomenti diversi. Questo meccanismo è noto come Overloading. Per implementare l’overloading dobbiamo creare due, o più, metodi con lo stesso nome in una classe ed eseguire una / più delle seguenti operazioni: 1. Diverso numero di parametri 2. Diversi tipi di dati dei parametri 3. Diversa sequenza del tipo di dati dei parametri"
17,Perché non è possibile fare l’overloading di un metodo cambiando il tipo di dati restituito dal metodo?,"Se cambiamo il tipo dati ritornato dei metodi in overloading, ci possono essere  comportamenti ambigui. Come si fa a sapere quale metodo verrà invocato? 
Per questo motivo non è possibile, in overloading, cambiare il tipo di dati ritornato."
18,Differenza tra x++  e ++x,"X++; // valuta X, poi incrementa X di 1
++X; // incrementa X di 1 e poi valuta X"
19,Differenza tra variabile di istanza e variabile di classe,"Variabili di istanza:  Queste variabili appartengono all'istanza di una classe , quindi un oggetto. E ogni istanza di quella classe (oggetto) ha la propria copia di quella variabile. Le modifiche apportate alla variabile non si riflettono in altre istanze di quella classe.
Variabili di classe:  Queste sono anche conosciute come variabili membro statiche e c'è solo una copia di quella variabile condivisa con tutte le istanze di quella classe. Se vengono apportate modifiche a quella variabile, tutte le altre istanze vedranno l'effetto delle modifiche."
20,Cos’è il bytecode?,Con il termine bytecode si intende i file con estensione .class e rappresenta il prodotto della compilazione di un file sorgente scritto in linguaggio Java.
21,Che cos’è l’overriding?,Una classe derivata può avere un metodo identico ad un metodo già presente nella classe base. Questa operazione di riscrittura è nota come ovverride.
22,Si può fare l’overriding di un metodo statico?,"No. Java non consente l'override di un metodo statico. Se si crea un metodo statico con lo stesso nome nella sottoclasse, esso è un nuovo metodo statico, associato alla sottoclasse, non un metodo sovrascritto."
23,Cos'è l'astrazione nella OOP?,L'astrazione è il processo di nascondere alcuni dettagli dell’implementazione di un oggetto e mostrare solo le caratteristiche essenziali dell'oggetto al mondo esterno. Il processo di astrazione identifica i punti in comune e nasconde la complessità dell’implementazione. Ci aiuta a concentrarci sull’interfaccia che condividiamo con il mondo esterno.
24,Quali sono le differenze tra l’Astrazione e l’Incapsulamento?,"L'astrazione mostra all’esterno solo le funzionalità essenziali, nascondendo l’implementazione all’interno. L'incapsulamento, anche noto come ""Information Hidden”,  ha lo scopo di incapsulare i dati all’interno della classe e permetterne l'accesso solo tramite dei metodi appositi."
25,Cos'è una classe astratta?,"Una classe astratta è simile a una normale classe: può avere attributi e metodi, ma è caratterizzata dalla parola chiave abstract. Non può essere istanziata e la sua implementazione è demandata alle sottoclassi;"
26,È possibile contrassegnare solo il metodo con la parola chiave abstract senza rendere abstract la classe?,"No. La specifica Java dice che se c'è almeno un metodo abstract in una classe, la classe deve essere contrassegnata come astratta."
27,È consentito contrassegnare un metodo astratto final?,"No. E’ contraddittorio. Un metodo astratto deve essere sovrascritto da una classe figlia, mentre un metodo final non può essere sovrascritto. Quindi un metodo può essere sia astratto o finale. "
28,Quali sono i concetti fondamentali di OOP?,"Astrazione, incapsulamento, ereditarietà e polimorfismo sono i concetti fondamentali di OOP."
29,Cos'è un oggetto?,Un oggetto è un'istanza di una classe.
30,Qual è la differenza tra un oggetto e un riferimento a un oggetto?,Un oggetto è un'istanza di una classe. Il riferimento all'oggetto è un puntatore all'oggetto. Ci possono essere molti riferimenti allo stesso oggetto.
31,Possiamo istanziare una classe astratta?,No. Non possiamo creare un'istanza di una classe astratta. 
32,Cosa fa il metodo trim () della classe String?,trim () elimina gli spazi iniziali e finali di una stringa.
33,Cosa sono gli enum?,"Le classi Enum definiscono un tipo di dati che può assumere un determinato numero di valori costanti, come ad esempio i semi di una carta da gioco che possono assumere  solo 4 possibili valori. "
34,Cos'è un'interfaccia?,"Le interfacce sono entità simili a classi, ma con i metodi senza corpo, cioè metodi con la sola dichiarazione. Servono a dare dei comportamenti standard a tutte le sottoclassi, ossia tutte le sottoclassi devono per forza implementare i metodi dichiarati nelle interfacce.  Talvolta si dice che un’interfaccia è un contratto tra chi la implementa e chi la usa. La classe che implementa un’interfaccia, essendo obbligata ad implementarne tutti i metodi garantisce la fornitura di un servizio. Chi usa un interfaccia ha la garanzia che il contratto di servizio è effettivamente realizzato: non può accadere che un metodo non possa essere chiamato. Vengono definite tramite l'uso della parola interface al posto della keyword class, nella creazione di una classe. Come concetto è molto simile ad extends, ma una sottoclasse in java può estendere soltanto un’unica superclasse, mentre una classe può implementare infinite interfaccie (ereditarietà multipla). E’ necessario implementare TUTTI i metodi delle interfacce. Se così non fosse, il compilatore ci darebbe un errore."
35,È consentito avere un  metodo statico  in un'interfaccia?,"Sì, da Java 8 in poi, possiamo definire metodi statici e di default in un'interfaccia. Prima, non era consentito."
36,Perché un'interfaccia non può essere contrassegnata come final?,La keyword final impedisce che la classe sia ereditata ma lo scopo dell’interfaccia è proprio essere ereditata. Quindi rendere un’interfaccia final è una contraddizione. 
37,Qual è la differenza tra classe astratta e interfaccia?,"Le differenze tra la classe astratta e l'interfaccia sono le seguenti:      • Una classe astratta, oltre a metodi astratti, può contenere dati e metodi non astratti. Una interfaccia no.     • Una classe astratta può avere un costruttore. Una interfaccia no.     • In una interfaccia si possono definire solo costanti.     • In una interfaccia i metodi la visibilità sarà public in automatico (c’è anche la possibilità di usare quella di default ma i figli saranno “costretti” a fare l’override dei metodi con public, anche se sono nello stesso package)."
38,In una interfaccia possiamo utilizzare i modificatori private e protected?,No. Tutte le variabili in un'interfaccia sono implicitamente pubbliche.
39,Possiamo modificare il valore di una variabile dichiarata final?,"Una variabile dichiarata final è una costante, perciò, una volta che il valore è impostato, non può essere modificato."
40,Una classe può essere final?,"Sì, una classe può essere contrassegnata come finale in Java. Una volta che una classe è stata contrassegnata final, non può essere estesa."
41,Cosa significa dichiarare un metodo final?,Final sul metodo indica che l’override del metodo non può essere fatto.
42,Differenza tra Heap e Stack,La differenza più importante tra heap e stack è che lo stack viene utilizzato per memorizzare variabili locali e chiamate di funzione mentre la memoria heap viene utilizzata per archiviare oggetti in Java.
43,A cosa servono i package?,"Un package è un “contenitore” che raccogliere al suo interno una serie di classi, o anche altri packages, in qualche modo logicamente legati tra loro.   Raggruppando le classi affini in package, miglioriamo l’organizzazione del codice e impediamo i conflitti tra classi con nomi uguali: ad esempio due classi di nome Prova possono coesistere in due package diversi, senza che ci sia nessun errore di compilazione o altro.  Java fornisce diversi package in cui sono presenti varie classi, suddivise per funzionalità, come ad esempio java.io che contiene le classi per l’input e l’output.   Si può anche creare un proprio package, utilizzando la keyword package come prima riga del file .java.  Più precisamente, se si desidera creare una classe A che appartenga al package mypackage, allora sarà necessario scrivere all’interno del file A.java"
44,Che cos’è la serializzazione?,"Per serializzazione si intende la trasformazione di un oggetto java in uno stream di byte.  La deseralizzazione, invece, è la trasformazione di uno stream di byte in oggetti java. Queste operazioni vengono, ad esempio, effettuate quando si invoca un metodo, che prende in input un oggetto, che si trova su una macchina remota (quindi con diversa JVM) o durante la lettura/scrittura di un file binario."
45,Qual è lo scopo della serializzazione?,Alcuni degli usi della serializzazione sono:     • Comunicazione: è utilizzato per trasmettere un oggetto rete tra due macchine.     • Persistenza: possiamo memorizzare lo stato dell'oggetto in un database e recuperarlo dal database in seguito.
46,Cos'è la deserializzazione?,La deserializzazione è il processo di ricostruzione dell'oggetto da uno stream di byte. È il processo inverso della serializzazione. 
47,Perché contrassegnare un dato come transient?,"Le variabili membro di un oggetto sono contrassegnate come transient per indicare che non devono essere serializzati. Quindi, durante la serializzazione, non sono considerate parte dello stato di un oggetto."
48,È consentito contrassegnare un metodo come transient?,"No, Java non consente di contrassegnare un metodo come transient. Il la parola chiave transient è valida solo per le variabili membro. "
49,Cos’è il Garbage Collector?,"Il garbage collector di Java è un sistema automatico che si occupa di liberare la memoria dagli oggetti non più usati, liberando, così, i programmatori dal vincolo di dover allocare e de-allocare gli oggetti in memoria.  Un oggetto è considerato “non più usato” quando non è più referenziato ossia non c’è nessun riferimento, diretto e indiretto.  Il Garbage Collector (GC) prima esegue un processo detto marcatura (marking), in cui identifica quali pezzi di memoria sono in uso e quali no. "
50,Quando un oggetto diventa idoneo per Garbage Collector?,"Un oggetto è idoneo per il Garbage Collector  quando non è più referenziato ossia non c’è nessun riferimento, diretto e indiretto."
51,Cos'è una classe annidata?,Una classe annidata (o interna o inner class) è una classe dichiarata all’interno di un’altra classe.
52,Perché le stringhe vengono dette immutabili?,"Una volta creato un oggetto String, non è possibile modificarlo. Quando  assegniamo alla stringa un nuovo valore, viene creato un nuovo oggetto. "
53,"Nel seguente codice, quanti oggetti vengono creati? 
String s1 = ""HelloWorld""; 	String s2 = ""HelloWorld""; 	String s3 = ""HelloWorld"";","Il codice crea un solo oggetto. Questo perché tutti i riferimenti puntano a stesso oggetto, cioè a  ""HelloWorld"";"
54,In quanti modi si può creare un oggetto String?,"Java offre due modi per creare un oggetto String. Uno è usando le String Literal, l'altro è utilizzando l'operatore new.  "
55,"Nel seguente codice, quanti oggetti vengono creati?
String s = new String (""HelloWorld"");",Il codice crea due oggetti. Un oggetto viene creato nello String Pool e l'altro viene creata nell'Heap memory.
56,Qual è la differenza principale tra String e StringBuffer?,String è un oggetto immutabile. Il suo valore non può cambiare dopo la creazione. StringBuffer è un oggetto mutabile. Possiamo continuare ad aggiungere o modificare il contenuto. 
57,Qual è l’uso del metodo toString?,"Questo metodo può essere utilizzato per restituire la rappresentazione String di un oggetto. Quando stampiamo un oggetto, Java chiama implicitamente il metodo toString (). Java fornisce un'implementazione predefinita, definita nella classe Object, per il metodo toString (). Ma possiamo sovrascrivere questo metodo per restituire il formato che vogliamo.+"
58,Qual è la differenza tra StringBuffer e StringBuilder?,"StringBuilder è la classe più efficiente, ma non è thread-safe. StringBuffer è tread-safe. "
59,Quali sono le differenze tra le eccezioni Checked  e Unchecked?,"Un programma può andare in errore per molti motivi:     • Errori di programmazione (divisione per zero, cast non permesso, etc)     • Errori di sistema (connessione remota chiusa, memoria non disponibile, etc)     • Errori di utilizzo (input non corretti, file inesistente, etc)  Java ha una gerarchia di classi per rappresentare le varie tipologie di errore, dislocate in package diversi, a seconda del tipo di errore. La superclasse di tutti gli errori è la classe Throwable, nel package java.lang. "
60,Cos'è un blocco finally?,"Se abbiamo necessità, all’interno di un blocco try/catch, di eseguire sempre alcune istruzioni, sia che venga sollevata una eccezione o meno,  possiamo usare la clausola finally."
61,Possiamo creare un blocco finally senza avere un blocco catch?,"Sì. Un blocco finally può trovarsi subito dopo un blocco try, senza per forza inserire un catch."
62,Qual è la differenza tra throw e throws?,"Throw per genera esplicitamente un'eccezione.  Throws, inserita nella dichiarazione del metodo, propaga l’eccezione al metodo chiamante. "
63,Come funziona la Propagazione delle eccezioni?,"Se gestiamo l’eccezione con il try/catch, l’insorgere di qualche problematica rimarrà confinata all’interno del metodo stesso.  Ci potrebbero essere dei casi in cui si vuole informare chi ha chiamato il metodo, il chiamante, dell’esistenza di questi errori. Allora, è sufficiente aggiungere alla firma del metodo la parola chiave throws (lancia) seguita dal tipo di eccezione che viene “rilanciata”: il metodo termina immediatamente e le istruzioni successive non vengono eseguite:"
64,Quali sono le principali differenze tra un vettore e un ArrayList?,"Le differenze sono: 1. Sincronizzazione: Vector è sincronizzato, ArrayList no. Quindi un ArrayList ha operazioni più veloci di un vettore. 2. Crescita dei dati: internamente viene utilizzato,  sia per ArrayList che Vector, un array per memorizzare i dati. Quando un ArrayList è quasi pieno, esso aumenta la sua dimensione del 50% della dimensione dell'array. Mentre a Vector lo aumenta raddoppiando la dimensione dell'array sottostante."
65,"In quale scenario, LinkedList ha prestazione migliori dell’ArrayList?",LinkedList  è usata quando si hanno molti inserimenti o eliminazioni di elementi. L’arrayList è consigliabile nel caso di numerosi accessi casuali.
66,Quali sono le differenze tra List e Set?,"Le principali differenze tra una lista e un set sono: 1. Ordine: la List è una sequenza ordinata, ordine di inserimento, di elementi. Un Set è solo una raccolta distinta di elementi non ordinati. 2. Accesso posizionale: quando usiamo una List, possiamo specificare dove esattamente vogliamo inserire un elemento. In un Set non è possibile. 3. Duplicati: in una lista possiamo memorizzare elementi duplicati. Un set può contenere solo elementi unici."
67,Quali sono le differenze principali tra HashSet e TreeSet?,"Le principali differenze tra un HashSet e un TreeSet sono:     • Ordinamento: in un HashSet gli elementi vengono memorizzati in modo casuale. In un TreeSet, gli elementi vengono archiviati in base al loro ordinamento naturale.     • Velocità: un HashSet è migliore di un TreeSet in termini di prestazioni per la maggior parte delle operazioni come add (), remove (), contains (), size () ecc"
68,"Quali sono le principali differenze tra List, un Set o una Map?","Le differenze principali sono:     • Le List servono nel caso in cui i dati possano essere duplicati. Contengono dati ordinati in base all’inserimento.     • I Set si utilizzano nel caso in cui i dati non devono avere valori replicati.     • Map, i dati contenuti sono indicizzati tramite chiave e valore. Non contiene chiavi duplicate, ogni chiave ha al massimo un valore."
69,Quali sono le differenze tra HashMap e Hashtable?,"Le principali differenze tra una HashMap e una Hashtable sono: 1. Sincronizzazione: HashMap non è sincronizzato, HashTable si. 2. Valori nulli: una HashMap consente solo una chiave nulla e qualsiasi numero di valori nulli. Hashtable non consente chiavi o valori nulli."
70,Qual è la differenza principali tra  HashMap e TreeMap?,TreeMap è una mappa ordinata. HashMap no.
71,Come possiamo vietare l'eredità di una classe?,"Se la classe viene resa final, non può essere estesa. Questo proibirà l'eredità."
72,"Il seguente codice cosa stampa?
 Public static int prova(int a) {
		return ++a;
	}
	public static void main(String[] args) {

		int a = 10;
		 a = prova(a);
		 System.out.println(a);
		 
		
	}
","Il codice stampa 11, perché, nonostante che il passaggio dei parametri di un tipo primitivo sia per valore, l’istruzione ++a prima incrementa a e poi la ritorna."
73,Qual è la differenza principale tra Comparable e Comparator?,"Per poter ordinare un insieme di oggetti, java ci mette  a disposizione due semplici metodi della classe Collections:      • static void sort(List list)     • static void sort(List list, Comparator c)  Il primo metodo ordina l'insieme secondo l'ordine implicito degli oggetti (quindi controllerà se la classe implementa Comparable e chiamerà il metodo compareTo), mentre il secondo  metodo si avvale del Comparator passato come secondo parametro (quindi la lista verrà ordinata in base al comparator passato in input). L'interfaccia Comparable permette di implementare l'ordinamento implicito di un oggetto. L'interfaccia fornisce un solo metodo: public int compareTo(Object obj); La specifica prevede che il metodo deve ritornare 1 nel caso in cui l'oggetto this (la classe che implementa l'interfaccia) è maggiore dell'oggetto obj, ritorna 0 se sono uguali, -1 altrimenti.   Comparator interfaccia fornisce un unico metodo molto simile al compareTo() dell'interfaccia Comparable: public int compare(Object a, Object b);  Differenze  Comparable e Comparator      • con Comparable, si deve modificare la classe di oggetti che si vuole ordinare in modo che implementi Comparable, fornendo così un ordinamento esplicito per quella classe     • con Comparator, si deve creare una nuova classe che implementi Comparator, poi se si vuole ordinare una lista di oggetti in base a quel comparator si richiama la funziona Collections.sort(lista, comparatore);     • Con Comparable definisco un ordinamento di default della classe. Con comparator definisco i vari tipi di ordinamento che posso avere."
74,Qual è il motivo per l'override del metodo equals ()?,"Il metodo equals () nella classe Object viene utilizzato per verificare se due gli oggetti sono uguali o no.  Se vogliamo un'implementazione personalizzata, possiamo sovrascrivere questo metodo. Ad esempio, ipotizzando di avere una classe Persona, con nome, cognome ed età, e consideriamo due oggetti Persona uguali se hanno stesso nome e cognome, allora possiamo sovrascrivere il metodo equals () per confrontare il nome e il cognome degli oggetti Persona. Inoltre, se usiamo qualche implementazione di HashMap, e vogliamo usare un oggetto come chiave, allora dobbiamo sovrascrivere il metodo equals ()."
75,Come funziona il metodo hashCode ()?,"La classe Object ha il metodo hashCode (). Questo metodo restituisce un numero intero, detto codice hash. E’ usato in tanti ambiti, per esempio nelle hashmap. In particolare, per il corretto uso delle HashMap è necessario fare l’override del metodo hashcode e di equals, tenendo conto che:     • due oggetti uguali, quindi con equals che ritorna true, devono avere lo stesso codice hashcode.     • Se due oggetti non sono uguali, non per forza devono ritornare differenti hash "
76,Qual è la differenza tra ArrayList e LinkedList?,"Principali differenze tra le strutture dati ArrayList e LinkedList siamo:     • Inserimento: è più veloce inserire nuovi elementi in una LinkedList.     • Rimozione: LinkedList ha prestazioni migliori in rimozione di elementi rispetto a ArrayList.     • Utilizzo della memoria: LinkedList utilizza più memoria di ArrayList, perché internamente ogni nodo deve puntare il nodo precedente e successivo.     • Accesso: LinkedList è più lento nell'accesso a un elemento."
77,Qual è la differenza tra Set e Map?,"Le principali differenze tra un set e una mappa sono: - Elementi duplicati: un set non consente l'inserimento elementi duplicati. Una mappa non consente l'utilizzo di chiavi duplicati, ma consente di inserire valori duplicati per chiavi univoche. - Valori nulli: un Set consente di inserire al massimo elemento nullo. In una mappa possiamo avere al massimo una singola chiave nulla e qualsiasi numero di valori nulli."
78,"Cos'è il problema delle collisioni, e come viene gestito, nelle HashMap?","Per poter usare correttamente l’HashMap bisogna implementare correttamente l’override delle funzioni hashcode() e equals() altrimenti si incorre nel problema delle collisioni, ossia per due chiavi diverse che hanno lo stesso hashcode,e quindi andranno nella stessa locazione,  non ci sarà modo di capire se si devono essere sovrascritti o aggiunti in quella locazione. Per risolvere questo problema si deve fare l’override di haschcode (in modo da ridurre al minimo la possibilità che due chiavi diverse abbiano lo stesso hash) e anche di equals.In questo modo quando due chiavi diverse (due chiavi associati a due valori diversi) hanno lo stesso hashcode  viene utilizzata la  funzione equals per capire se è la stessa chiave o no. Se è la stessa chiave, viene aggiornata la coppia chiave-valore (ricordiamoci che nella locazione vengono inserite le coppie chiavi-valori), altrimenti viene aggiunta"
79,Cos'è un iteratore?,Iterator è un'interfaccia Java per accedere agli elementi di una Collection.
80,Qual è la differenza principale tra Array e ArrayList?,"La dimensione degli array in Java è fissa. Negli ArrayList invece è dinamica, la sua capacità aumenta automaticamente. "
81,"Perché si dice che con  Java  ""scrivi una volta, esegui ovunque”?","Con Java, il codice compilato che viene eseguito su una piattaforma non deve essere ricompilato per essere eseguito su una piattaforma diversa; infatti il prodotto della compilazione è in un formato chiamato bytecode che può essere eseguito da una qualunque implementazione di un processore virtuale detto Java Virtual Machine;"
82,Cos'è un thread?,"Un thread è un insieme di istruzioni eseguite in sequenza, una dopo l’altra. Tipicamente, un processo può essere suddiviso in sotto-processi, in modo da poter delegare a ognuno un certo compito. Questi processi figli vengono detti thread, o anche processi light"
83,È possibile chiamare il metodo run () invece di start () su un thread?,"Sì. Possiamo chiamare il metodo run () di un thread. Ma non avvia un thread separato. E’ come chiamare un normale run, non viene startato nessun altro thread. "
84,Possiamo startare due volte lo stesso thread?,"No. Possiamo chiamare il metodo start () solo una volta su un thread. Se lo chiamiamo due volte, ci darà un'eccezione."
85,In cosa consiste la sincronizzazione?,Il concetto di sincronizzazione viene utilizzato nella programmazione multi-threading per controllare l'accesso di più thread a una risorsa condivisa. Viene utilizzato per evitare deadlock tra più thread.
86,Qual è lo scopo di un blocco sincronizzato?,Il blocco sincronizzato ha molti usi nel multi-threading. Alcuni degli usi sono:     • Prevenire interferenza tra thread     • Evita problemi di incoerenza sulla memoria condivisa tra thread. 
87,Quali sono i vantaggi e svantaggi nell’usare java?," vantaggi più importanti sono la portabilità del codice, ossia il codice java è eseguibile su qualsiasi macchina, e la facilità di uso. Svantaggi non si ha un controllo assoluto della macchina come si può avere con il linguaggio C, ma questo significa anche meno possibilità di fare grossi danni."
88,Cos'è una situazione di deadlock?,"Ipotizziamo di avere due  thread , chiamiamoli T1 e T2. T1 ha bloccato una certa risorsa R1 e per terminare la sua esecuzione ha bisogno della risorsa R2. T2 ha  bloccato la risorsa R2 e per terminare la sua esecuzione ha bisogno della risorsa R1. Quindi T1 è in attesa che T2 rilasci la risorsa R2, ma T2 è a sua volta in attesa che venga rilasciata la risorsa R1, bloccata da T1. Si ha cosi una specie di stallo infinito chiamato deadlock."
89,"Scrivere un metodo che, data una matrice di interi, popola la diagonale principale con dei 2?","public static void visualizzaArray(int[][] Q) {
		for (int i = 0; i < Q .length; i++) 
			Q [i][i]=2;
		}"
90,Quali sono le differenze principali tra processo e thread?,"Una differenza sostanziale fra thread e processi consiste nel modo con cui essi condividono le risorse: mentre i processi sono di solito fra loro indipendenti, i thread di un processo tipicamente condividono le medesime informazioni di stato, la memoria ed altre risorse di sistema. Un'altra differenza è nel meccanismo di attivazione: la creazione di un nuovo processo è sempre onerosa per il sistema, in quanto devono essere allocate ovvero assegnate risorse necessarie alla sua esecuzione (allocazione di memoria, riferimenti alle periferiche, e così via, operazioni tipicamente onerose); il thread invece è parte di un processo e quindi una sua nuova attivazione viene effettuata in tempi ridottissimi a costi minimi."
91,Quali sono gli stati di un thread?,"Un thread può trovarsi nei seguenti stati (ad alto livello):     • Start: il thread è stato creato con un’operazione di new() ma non è ancora stato mandato in esecuzione.     • Runnable: è stato chiamato il metodo start(), il thread è pronto ad essere eseguito, appena gli viene assegnata la CPU.     • Stop: il thread ha terminato la sua esecuzione, ossia il metodo run è stato completamente eseguito.     • Blocked: il thread è bloccato, non può essere eseguito, per esempio potrebbe essere in attesa di avere a disposizione una risorsa.     • Running: il thread è in esecuzione sulla cpu."
92,Come si può creare un thread in Java?,"Java offre due possibilità per creare un thread: estendere una classe o implementare una interfaccia. Concretamente non cambia niente, tranne il fatto che se estendiamo una classe con thread poi non ne potremo estendere altre (ricordiamoci che solo una classe alla volta può essere estesa); invece con una interfaccia, essendo possibile implementarne molte, non abbiamo di questi vincoli. Estendere la classe Thread Estendendo la classe Thread dobbiamo fare l’override del metodo run(), e dentro inserire tutte le operazioni che vogliamo far eseguire al nostro thread. Per poter lanciare il nostro thread è sufficiente creare un oggetto di tale classe ed invocare il metodo start(). La JVM creerà il nuovo thread e invocherà il metodo run().
Implementare l’interfaccia Runnable In questo caso dovremo implementare l’interfaccia Runnable, creare una istanza di Thread e dare in input un oggetto di tipo runnable.
Fondamentalmente la differenza è che runnable si implementano  invece Thread viene estesa.  Notare che, implementando l’interfaccia Runnable e il metodo run() per farla funzionare come un Thread deve essere “agganciata” a un oggetto Thread (un’istanza della classe Thread o di una sua sottoclasse) passando un reference dell’oggetto Runnable al costruttore del Thread. In entrambi i casi, sia con l’estensione che con l’implementazione, si deve evitare di chiamare direttamente il metodo run: il thread non viene lanciato ma è come se chiamassimo un normale metodo di una classe."
93,Come funziona un metodo syncronized?,"Possiamo pensare a syncronized come ad un lucchetto relativo a un pezzo di codice: chiunque voglia eseguire quel pezzo di codice deve avere il lucchetto. Quando un thread acquisice il lucchetto, esso lo terrà fino a quando terminerà tutto il codice protetto da quel lucchetto. Se nel frattempo un altro thread vuole accedervi, dovrà aspettare che il lucchetto ritorni libero. Ricapitolando: syncronized ci garantisce che quel pezzo di codice non può essere eseguito contemporaneamente da due thread."
94,"Il seguente codice è thread-safe?
public class SingletonDoubleCheck {
	private SingletonDoubleCheck instance = null;

	public SingletonDoubleCheck getInstance() {
		if (instance == null) {
			synchronized (SingletonDoubleCheck.class) {
							instance = new SingletonDoubleCheck();
	
			}
		}
		return instance;
	}
}","Il codice sopra menzionato serve per creare una classe Singleton, ma non è thread-safe. Questo perchè il metodo getInstance () potrebbe restituire un oggetto che non è stato inizializzato correttamente."
95,Cos'è la scalabilità di un programma?,"La scalabilità è la capacità di un programma di gestire quantità crescente di utenti (di lavoro) o il suo potenziale di poter essere ampliato per affrontare le richieste crescenti. Quando diciamo che un programma non è scalabile, significa che il programma fallisce all’aumentare della sua utenza."
96,Cos'è un'espressione Lambda?,Le espressioni Lambda costituiscono la principale novità per il linguaggio di programmazione Java 8.  E’ una funzione che ha un corpo ma non un nome ed è definita nel punto in cui viene utilizzata. 
97,Quali sono le tre parti principali di un'espressione Lambda?,"Tre parti principali di un'espressione Lambda sono:     • Elenco dei parametri: un'espressione Lambda può avere zero opiù parametri. L'elenco dei parametri è facoltativo.     • Operatore freccia Lambda: ""->"" è noto come freccia Lambda. Separa l'elenco dei parametri e il corpo della funzione Lambda.     • Corpo dell'espressione lambda: il pezzo di codice che vogliamo da eseguire. Nel seguente esempio: Arrays.asList( ""a"", ""b"", ""d"" ).forEach( e -> System.out.println( e ) );  Lista parametri = e Arrow = -> Corpo = System.out.println( e )"
98,Cos'è un'interfaccia funzionale?,Un'interfaccia funzionale in Java è un'interfaccia che ha esattamente una metodo astratto. java.lang.Runnable e java.util.concurrent.Callable sono  due esempi di interfacce funzionali molto popolari.
99,Che cos'è un metodo di default in un'interfaccia?,"E’ un normale metodo con corpo, ma nella sua dichiarazione è preceduto dalla parola chiave default.
In una interfaccia ci possono essere molti metodi di default.  Le classi che implementano l’interfaccia possono scegliere  se definire una propria implementazione del metodo o usare quella fornita dall’interfaccia."
100,È possibile definire un metodo statico in un'interfaccia?,Corrispondono a dei metodi statici definiti sulle interfacce e non possono essere sovrascritti nelle classi che la implementano;
101,Qual è la differenza tra StringBuffer e StringBuilder?,"La differenza principale è che StringBuffer è sincronizzato e StringBuilder noi. A causa di questa differenza, la concatenazione di String utilizzando StringBuilder è più veloce di StringBuffer.  Ora è considerato una cattiva pratica usare StringBuffer, perché, nella maggior parte degli scenari, eseguiamo la concatenazione di stringhe nello stesso thread."
102,Qual è la differenza tra x == y e x.equals (y)?,"Prima di vedere la differenza tra equals e == dobbiamo capire un po' meglio come viene gestita la memoria nel caso in cui si abbia a che fare con dati di tipo primitivo o un oggetto. Un tipo primitivo in memoria è rappresentato come una locazione di memoria, in cui viene memorizzato il valore corrispondente. Un oggetto in memoria è rappresentato come una locazione in cui è presente il riferimento (ossia un indirizzo) all’area di memoria  contenente l’oggetto stesso.  Questa è la più grande differenza tra un oggetto e un tipo primitivo."
103,"Qual è la differenza tra le espressioni String s = ""ciao"" e Stringa s1 = new String (""Hello"")? Qual è migliore e più efficiente?","In generale, la dichiarazione di s è più efficiente da usare rispetto a s1. La stringa ""ciao"", viene creata nel pool di stringhe.  La dichiarazione di s1 invece, prima viene creata una stringa “Hello” nel pool di stringhe e poi crea un oggetto, di tipo String, nella memoria. Quindi in totale abbiamo la creazione di 2 oggetti rispetto a 1 del primo caso. Perciò il primo modo è più efficiente rispetto al secondo."
104,Qual è la differenza tra un parametro passato per riferimento e uno passato per valore?,"Come abbiamo visto, i metodi accettano delle variabili in input. Questa operazione viene chiamata “passaggio di parametri”. Passaggio Parametri Per Valore Una variabile, chiamiamola X, di tipo primitivo, viene passata ad un metodo per valore (passaggio parametri per valore): il metodo crea una copia della variabile X, chiamiamola X1, in input, e userà questa al suo interno. Perciò, tutte le modifiche fatte su X1, non influenzeranno in nessun modo X, che manterrà il suo valore originale.
Passaggio Parametri Per Riferimento Un oggetto X viene passato ad un metodo per riferimento: il metodo crea un’oggetto X1 che contiene un riferimento all’oggetto X. Le modifiche fatte su X1, verranno perciò riportate su X."
105,Qual è la differenza tra un processo e un thread?,"Una differenza sostanziale fra thread e processi consiste nel modo con cui essi condividono le risorse: mentre i processi sono di solito fra loro indipendenti, i thread di un processo tipicamente condividono le medesime informazioni di stato, la memoria ed altre risorse di sistema. Un'altra differenza è nel meccanismo di attivazione: la creazione di un nuovo processo è sempre onerosa per il sistema, in quanto devono essere allocate ovvero assegnate risorse necessarie alla sua esecuzione (allocazione di memoria, riferimenti alle periferiche, e così via, operazioni tipicamente onerose); il thread invece è parte di un processo e quindi una sua nuova attivazione viene effettuata in tempi ridottissimi a costi minimi."
106,Qual è la differenza tra le parole chiave throw e throws?,Quando vogliamo sollevare un'eccezione nel nostro codice usiamo throw. La parola chiave throws viene utilizzata nella dichiarazione del metodo per indicare le eccezioni che esso può generare. La gestione delle eccezioni indicate nel throws viene relegata al metodo chiamante.
107,Qual è la differenza tra una classe e un oggetto?,Una classe è un modello di un oggetto da creare. Un oggetto è un'istanza di una classe. Una classe definisce i metodi e le variabili membro. Un oggetto popola i valori delle variabili membro. Quindi la classe è una specie di timbro che si usa per creare oggetti. 
108,Cos’è l’Information Hiding?,"L’Information Hiding è un concetto della OOP. Viene usato per nascondere le informazioni. In java è implementato rendendo private le variabili e definendo dei metodi pubblici per accedervi. Questo aiuta a disaccoppiare la logica interna dell’oggetto dal mondo esterno. Utilizzando l’Information Hiding, un oggetto può cambiare la sua implementazione interna senza influire sul codice che un client usa per richiamarlo."
109,Come rendere un oggetto Immutabile?,Per rendere un oggetto immutabile:     • eliminare qualsiasi metodo setter che possa cambiare i campi della classe.      • rendere i campi final.  Seguendo queste regole garantirà che i campi dell’oggetto non cambieranno e di conseguenza l’oggetto sarà considerato immutabile.
110,Cos’è una classe Singleton?,Una classe Singleton è una classe che ha al massimo un'istanza. 
111,Cos’è il pattern Strategy?,"Il pattern Strategy è utilizzato per implementare un algoritmo (o un insieme di algoritmi) all'interno di una classe, in modo da poter modificare dinamicamente il suo comportamento, in base alle situazioni di utilizzo. O anche per permettere al client di decidere quale algoritmo utilizzare, senza conoscere i dettagli implementativi."
112,Cos’è il design pattern Observer?,"Nel pattern  Observer, c'è un Soggetto che mantiene l'elenco di Osservatori in attesa di aggiornamenti sull'argomento. Ogni volta che c'è un aggiornamento il Soggetto notifica a tutti gli osservatori il cambiamento. Per esempio, gli studenti in attesa del risultato del loro test sono gli osservatori e il test è l’oggetto osservato. Una volta che il risultato del test è noto, l'organizzatore comunica a  tutti gli studenti il loro risultato."
113,Cos’è il pattern Decorator?,"Il design pattern Decorator fornisce un’alternativa flessibile all’ereditarietà per estendere la funzionalità degli oggetti. Tale pattern consente di arricchire dinamicamente, a run-time, un oggetto con nuove funzionalità: è possibile impilare uno o più decorator uno sopra l’altro, ciascuno aggiungendo nuove funzionalità."
114,Cos’è il pattern Builder?,"Il pattern Builder è usato per la costruzione di oggetti molto complessi, sostituendo costruttori, poco leggibili e scomodi da utilizzare, con una classe, il builder appunto."
115,Un’interfaccia può avere metodi con corpo?,"Fino a java 8 un’interfaccia non poteva avere metodi implementati. Da Java 8 in poi, nelle interfacce si possono definire metodi di default,  statici  e privati con la particolarità dall’avere anche un corpo."
116,Quali sono gli usi principali del pattern Facade?,Alcuni degli usi più popolari del facade sono:     • Fornire metodi più semplici per attività che vengono usate spesso.     • Rendere più semplice un sistema.     • Nascondere il funzionamento del codice interno.     • Semplificare l’uso di un sistema molto complesso e difficile da usare.  
117,Qual è la differenza principale tra il pattern Builder e Factory?,Il pattern Builder può supportare la creazione di un gran numero di varianti di un oggetto. Il pattern Factory può creare una gamma più ampia di sottotipi di un oggetto.
118,Che cos'è il pattern DAO?,"Il pattern DAO viene utilizzato nel livello persistenza dei dati. Lo scopo è rendere l'applicazione disaccoppiata e meno dipendente dal database effettivo. In breve, il DAO nasconde l'implementazione del database alla classe che accede ai dati tramite un oggetto DAO. "
119,Cos’è il pattern Singleton?,"Il singleton è un pattern che garantisce una sola istanza di una determinata classe. Per esempio quando si desidera avere solo un Window Manager oppure una sola Coda di Stampa oppure un unico accesso al database si può usare il pattern singleton. Ci sono diversi modi per implementarlo in java. Il più semplice è rendere una variabile statica dello stesso tipo della classe, il costruttore privato (quindi nessuno lo può chiamare, e di conseguenza nessuno può istanziare la classe, al di fuori di essa) e avere un metodo statico che restituisca l’unica istanza esistente della classe. Questo modo di implementare il pattern si chiama Pattern Singleton Eager. "
120,Cosa serve la parola chiave final?,"Final è una keyword applicabile alle variabili, ai metodi e alle classi. In particolare si ha che:      • una variabile dichiarata final diviene una costante     • un metodo dichiarato final non può essere riscritto in una sottoclasse (non è possibile applicare l’override).     • una classe dichiarata final non può essere estesa (override e estensione saranno visti più avanti)"
121,Cos’è una variabile statica?,"Una variabile statica è condivisa da tutte le istanze della classe, ossia è una variabile globale comune a tutti gli oggetti di quella classe.  Di conseguenza, se un'istanza modifica una variabile statica, questa modifica sarà visibile da tutte le altre istanze dello stesso tipo."
122,Cos’è e come si crea un array?,"E' possibile avere un elenco di valori associati ad una variabile. Una variabile cosi composta si chiama array. Un array (anche detto vettore) è un gruppo di elementi che viene dichiarato, inizialmente, specificandone la dimensione.  La sintassi per la dichiarazione di una variabile di tipo array è la seguente:  TipoArray[]   nome = new TipoArray [n];  o anche:  TipoArray  nome[]= new TipoArray [n];  TipoArray  può essere sia un tipo primitivo che  una classe.  “n” indica che l’array può contenere fino ad un massimo di n elementi di tipo TipoArray.  Una volta creato l’array, possiamo accedere ai singoli elementi indicandone la posizione (detta indice), grazie all’operatore ‘[]‘ (parentesi quadre).
Un array multidimensionale è un array i cui elementi sono a loro volta array. La dichiarazione di un array multidimensionale è del tutto analoga a quella di un array monodimensionale, con la differenza che bisogna riportare tante coppie di parentesi quadre quante sono le dimensioni dell'array."
123,Cos’è un metodo statico?,"Un metodo statico è un metodo legato alla classe, non all’istanza. Viene usato quando si ha necessita di creare una operazione che non usa dati specifici di una istanza.  Per rendere un metodo statico è sufficiente inserire la parola chiave static nella sua dichiarazione."
124,Java è un linguaggio interpretato?,"Questi tipi di linguaggi, come suggerisce il nome, sono una via di mezzo tra quelli interpretati e quelli compilati.  Il codice sorgente viene prima trasformato (tramite il software compilatore) in un programma in un formato intermedio uguale per tutti i tipi di macchina.  Questo programma in linguaggio intermedio viene poi eseguito da un software interprete, diverso per ogni tipo di macchina (quindi potremmo avere un interprete per windows e un interprete per linux). Java è un linguaggio semi-interpretato, quindi il codice sorgente, che in questo caso corrisponde a un file di testo con estensione .java, ad esempio HelloWordl.java, viene “trasformato” (tramite un compilatore) in un formato intermedio (detto bytecode, riconoscibile dalla estensione file .class, esempio HelloWorld.class) che viene eseguito da un componente software installato sulla macchina in questione.  Questo componente è detto Java Virtual Machine (JVM), e dipende dal tipo di computer (ossia una JVM di linux sarà diversa da una JVM di windows)."
125,Cos’è un wrapper?,"Per ogni tipo primitivo, in java, esiste una classe corrispondente (detta Wrapper), il cui nome si può ottenere capitalizzando (mettendo in maiuscolo la prima lettera) il nome, tranne nel caso di Integer e Character che oltre alla prima lettera cambiano anche il nome.  Fondamentalmente, una classe wrapper è come un involucro (wrap) che ha lo scopo di contenere un valore primitivo, trasformandolo in un oggetto (quindi utilizzabile con le Java Collection, in quanto una collection può contenere solo oggetti e non tipi primitivi) e dotandolo di metodi di utilità."
126,Cosa sono le interfacce funzionali?,"Vengono chiamate interfacce funzionali (functional interface) delle interfacce con un solo metodo astratto. Sono generalmente marcate con l’annotazione @FunctionalInterface, anche se non è obbligatorio. Le lambda sono usate SOLO con le funcional interface."
127,Cos’è il polimorfismo?,"n informatica, il termine polimorfismo (“avere molte forme”) viene usato in senso generico per riferirsi a espressioni  che possono rappresentare valori di diversi tipi  (dette espressioni polimorfiche). Il polimorfismo in Java ha due diversi tipi di comportamenti:       • polimorfismo dei metodi      • polimorfismo dei dati  Il polimorfismo dei metodi si riferisce all’overloading e overriding dei metodi, che abbiamo già visto.    Analizziamo ora il polimorfismo dei dati.  Il polimorfismo dei dati permette ad una classe di assumere tutte le forme dei figli. 
Grazie a questa caratteristica, possiamo usare oggetti che espongono una stessa interfaccia, ma hanno implementazioni diverse.  Ricordiamoci infatti, che una interfaccia definisce un contratto generale che le sottoclassi devono soddisfare.  Quindi, possiamo utilizzare, ad esempio in un metodo, una interfaccia che varierà il suo comportamento in base a quale sottoclasse effettivamente verrà utilizzata. "
128,Cos’è l’ Overriding,Una classe derivata può avere un metodo identico ad un metodo già presente nella classe base. Questa operazione di riscrittura è nota come ovverride.
129,Cos’è l’overloading?,"In Java, una classe può avere più metodi con lo stesso nome ma argomenti diversi. Questo meccanismo è noto come Overloading. Per implementare l’overloading dobbiamo creare due, o più, metodi con lo stesso nome in una classe ed eseguire una / più delle seguenti operazioni: 1. Diverso numero di parametri 2. Diversi tipi di dati dei parametri 3. Diversa sequenza del tipo di dati dei parametri"
130,"Classe astratta e interfaccia, differenze e usi	118?","Entrambe permettono di definire un concetto senza dover conoscere i dettagli di una classe, dettagli che saranno implementati dai figli. Differenze sintattiche principali:      • Una classe astratta, oltre a metodi astratti, può contenere dati e metodi non astratti. Una interfaccia no.     • Una classe astratta può avere un costruttore. Una interfaccia no.     • In una interfaccia si possono definire solo variabili statiche e costanti.     • In una interfaccia i metodi la visibilità sarà public in automatico (c’è anche la possibilità di usare quella di default ma i figli saranno “costretti” a fare l’override dei metodi con public, anche se sono nello stesso package).  Oltre le differenze sintattiche, si usa una classe astratta o una interfaccia in base al tipo di legame che si vuole instaurare con le classi derivate.  Se si vuole un legame molto forte con le classi derivate si usa una classe astratta, in questo modo tutti i figli avranno un comportamento comune (ricordiamoci che una classe può estendere solo una classe).  Le interfacce, invece, servono per definire un comportamento più generico con i figli, potendo questi essere di vario genere e natura (ciò è dovuto al fatto che un figlio può implementare tante interfacce ma solo una classe, astratta o meno)."
131,I wrapper vengono passati per valore o per riferimento?,"I wrapper, essendo delle classi, sono teoricamente passati per riferimento ma, dato che l’unica modifica consentita su di essi è una nuova riassegnazione ( non ci sono metodi set nei wrapper), e questo vuole dire che tutte le modifiche fatte dal metodo sui wrapper non verranno riportati fuori dal metodo stesso, allora possiamo affermare che i wrapper  è come se fossero passati per valore. "
132,Come si fa a lanciare una eccezione?,Tramite la parola chiave Throw possiamo lanciare una eccezione. Esempio:  throw new Exception();
133,"Nello switch, la mancanza del break cosa comporta?","La mancanza del break, nel costrutto switch, comporta l’esecuzione del codice successivo."
134,"Differenza tra set, map e list?","Le List servono nel caso in cui i dati possano essere duplicati. Contiene dati ordinati in base all’inserimento . I Set si utilizzano nel caso in cui i dati non devono avere valori replicati. Map, i dati contenuti sono indicizzati tramite chiave e valore. Non contiene chiavi duplicate, ogni chiave ha al massimo un valore."
135,Cos’è l’immutabilità delle stringhe?,"Le stringhe in java sono rappresentate come degli oggetti della classe String; possono perciò essere create tramite l'operatore new.  String s = new String(""Hello"");  Esiste anche un modo alternativo  per  crearle (in questo caso sono dette stringhe letterali):    String s = ""Hello"";  La differenza principale è che, nel caso di new, viene creato un nuovo oggetto in memoria, invece, con la forma letterale, viene prima controllato se esiste già una stringa simile in una speciale area di memoria dedicata alle stringhe (String Pool); se esiste si ritorna un riferimento ad essa altrimenti si crea nuova e la si mette sempre nel string pool."
136,L’hashCode e il problema delle collisioni,"L'hashCode è un metodo in Java che restituisce un numero intero rappresentante il valore hash dell'oggetto. Questo valore viene utilizzato da strutture dati come HashMap per distribuire gli oggetti all'interno di un array o di una tabella hash.  Il problema delle collisioni si verifica quando due oggetti diversi producono lo stesso valore hash. In altre parole, due oggetti diversi hanno lo stesso hashCode. Poiché lo spazio degli hash è finito (ad esempio, se si utilizza un array per memorizzare gli oggetti in base all'hash), possono verificarsi collisioni.  Per gestire le collisioni, Java utilizza una struttura dati chiamata ""bucket"" all'interno delle tabelle hash. In caso di collisione, gli oggetti con lo stesso valore hash vengono memorizzati in un singolo bucket. Quando si cerca di recuperare un oggetto, l'algoritmo cerca prima nell'hash code appropriato e poi all'interno del bucket.  È importante progettare una buona funzione hash che distribuisca gli oggetti in modo uniforme per ridurre al minimo le collisioni. Inoltre, le moderne implementazioni delle strutture dati hash in Java, come HashMap, gestiscono automaticamente le collisioni per garantire un buon equilibrio delle prestazioni."
137,"Il seguente codice cosa stampa?
String a = ""abc"";  		String b = ""abc""; 		System.out.println(a == b);","Questo codice stampa “true” perché, a causa dell’immutabilità delle stringhe, a e b puntano allo stesso oggetto in memoria. "
138,Cosa sono le funzioni Lambda?,"Le espressioni Lambda costituiscono la principale novità per il linguaggio di programmazione Java 8.  Essa fornisce un modo per creare una funzione anonima, introducendo di fatto un nuovo tipo Java. Ma cos’è una funzione anonima (funzione non classe anonima)?  E’ una funzione che ha un corpo ma non un nome ed è definita nel punto in cui viene utilizzata. La loro sintassi è qualcosa di simile:  <interfacciaFunzionale>  nomeIstanza = (arg1, arg2) -> {body};"
139,Spiegare il Pattern Facade,"Letteralmente facade significa ""facciata"", ed infatti nella programmazione ad oggetti indica un oggetto che permette, attraverso un'interfaccia più semplice, l'accesso a sottosistemi che espongono interfacce complesse e molto diverse tra loro, nonché a blocchi di codice complessi. Consideriamo, ad esempio, la seguente situazione in cui una classe Client, per realizzare una singola operazione deve accedere ad alcune classi molto differenti tra loro.
L'utilizzo del pattern facade (qui realizzato attraverso la classe Facade) permette di nascondere la complessità dell'operazione, poiché in questo caso la classe Client chiama soltanto il metodo metodoUnico per realizzare la stessa operazione."
140,Mostrare i due modi di creare e startare un thread,Un thread si può creare estendendo la classe thread o implementando l’interfaccia runnable.
141,Spiegare il foreach dopo java 8,"Dopo Java 8, con l'introduzione del concetto di programmazione funzionale e l'aggiunta di nuove caratteristiche come le espressioni lambda e i nuovi metodi nelle interfacce funzionali, anche il ciclo foreach (o forEach) è stato migliorato per supportare in modo più elegante la programmazione funzionale.  Prima di Java 8, il ciclo foreach era utilizzato principalmente per iterare su collezioni di oggetti, come array o liste. Tuttavia, con l'introduzione del metodo forEach nelle interfacce Iterable in Java 8, è possibile eseguire operazioni su ciascun elemento di una collezione in modo più conciso e flessibile."
142,Cos’è una classe anonima?,"Java fornisce un meccanismo per dichiarare e istanziare una classe allo stesso tempo. Queste classi prendono il nome di classi anonime, poiché sono delle classi senza nome, locali, dichiarate all’interno di un metodo.  Vengono utilizzate quando si ha la necessità di avere una classe che serve solo in quel punto e in quel momento; risulta, quindi, inutile scrivere una normale classe che non verrà mai riutilizzata. E’ come se fossero delle classi usa e getta. Un grande vantaggio è la lunghezza del codice, molto più breve e compatto rispetto a dover scrivere un’intera classe da zero.  La sintassi per creare una classe anonima corrisponde alla chiamata di un costruttore, seguita da un blocco di codice che estende la classe stessa (o implementa metodi nel caso si crei una istanza anonima di una interfaccia). La sintassi è uguale sia che si voglia estendere una classe:    new class-name ( [ argument-list ] ) { class-body }  che implementare una interfaccia: new interface-name () { class-body }"
143,Creare un programma furono per leggere un file csv,"public List<String[]> readFromCsvFile(String separator, String fileName){
    try (BufferedReader reader = new BufferedReader(new FileReader(fileName))){
        List<String[]> list = new ArrayList<>();
        String line = """";
        while((line = reader.readLine()) != null){
            String[] array = line.split(separator);
            list.add(array);
        }
        return list;
    } catch (IOException e) {
        e.printStackTrace();
        return null;
    }  
}"
144,Pattern Mvc,"Il pattern MVC (Model-View-Controller) è un design pattern architetturale ampiamente utilizzato nel campo dello sviluppo del software. Esso separa le responsabilità di un'applicazione in tre componenti principali: Model, View, e Controller. Questa separazione aiuta a organizzare il codice in modo modulare, facilitando la manutenzione e l'estensione del software.  Ecco una spiegazione dei tre componenti principali del pattern MVC:  Model (Modello):  Il Model rappresenta la parte centrale dell'applicazione che gestisce i dati e la logica di business. È responsabile della manipolazione e dell'accesso ai dati, nonché dell'applicazione delle regole di business. Il Model notifica gli osservatori (spesso le parti View) quando i dati vengono modificati in modo che possano essere aggiornati. View (Vista):  La View è responsabile di visualizzare i dati provenienti dal Model e di presentarli agli utenti. Risponde agli input dell'utente e interagisce con il Controller per trasmettere le azioni dell'utente al Model. La View può essere più di una e può rappresentare i dati in modi diversi, ad esempio, una vista tabellare e una vista grafica. Controller (Controllore):  Il Controller agisce come intermediario tra la View e il Model. Riceve gli input dall'utente attraverso la View e traduce questi input in azioni che il Model deve eseguire. Aggiorna la View in base alle modifiche nel Model e può anche aggiornare il Model in risposta a eventi della View. Garantisce che la logica di business e la gestione degli input siano separate dalla presentazione dei dati. Il flusso di interazione tipico in un'applicazione basata sul pattern MVC è il seguente:  L'utente interagisce con la View (ad esempio, cliccando su un pulsante). La View invia l'input al Controller. Il Controller interpreta l'input, decide quali azioni intraprendere e interagisce con il Model. Il Model esegue le azioni richieste e aggiorna se necessario la View. La View ottiene i nuovi dati dal Model e si aggiorna di conseguenza. L'utente visualizza le modifiche nella View. Il pattern MVC favorisce la separazione delle responsabilità, rendendo il codice più modularizzato, facile da testare e mantenere. È ampiamente utilizzato in molti framework di sviluppo, come ad esempio Ruby on Rails, Spring (Java), Django (Python), e molti altri."
145,Come funziona l’operatore ternario con if?,"L'operatore ternario di Java è un costrutto condizionale che produce risultati analoghi al costrutto if ... else ... richiedendo, tuttavia, molto meno codice rispetto a quest'ultimo. Si tratta di una forma ""sintetica"" (occupa una sola linea di codice) attraverso la quale esprimere una condizione del tipo se ... altrimenti ..... L'operatore ternario viene usato prevalentemente in fase di assegnazione di una variabile (ma non solo, ovviamente) e sfrutta gli operatori ? e : per esprimere il proprio potenziale.  la sua sintassi è la:  condizione ? valore_1 : valore_2"
146,L’inizializzazione dei campi nelle interfacce è obbligatoria?,"I campi nelle interfacce sono considerate di default delle costanti final, e di conseguenza devono essere per forza inizializzati, pena errore di compilazione."
147,Qual è la funzione della keyword super?,"La parola chiave super è utilizzata in Java per riferirsi agli elementi della superclasse. Come per l’operatore this, anche super, viene utilizzato sia per le variabili (super.variabile) che per invocare altri metodi, tra cui anche il costruttore della classe padre."
148,Quali sono i modificatori di visibilità?,Public visibile da qualsiasi parte del programma   Private visibile solo all'interno della stessa  classe  Protected visibile solo dalle classi dello stesso package e da tutte le sottoclassi Default ( anche detta di package) visibile dallo stesso package e dalle sottoclassi se sono nello stesso package. È la visibilità assegnata di default se non viene specificato nulla. 
149,Se lancio una runtimeexception nel main che succede?,Niente perché è una unchecked exception quindi non da errore di compilazione.
150,Una classe astratta può avere un costruttore?,"Si, una classe astratta può avere un costruttore, al contrario delle interfacce."
151,Cosa significa thread-safe?,"Il concetto di thread safety (dall'inglese sicurezza dei thread), in programmazione, viene utilizzato, nell'ambito del multithreading, per indicare la caratteristica di una porzione di codice che si comporta in modo corretto nel caso di esecuzioni multiple da parte di più thread."
152,Una classe astratta deve avere obbligatoriamente almeno un metodo astratto?,"No, una classe può essere astratta senza avere nessun metodo astratto.
"
153,"Differenze tra String, StringBuilder e StringBuffer	140?","Le Stringhe sono immutabili e quindi ogni volta che eseguiamo manipolazioni come concatenazione, sottostringa, ecc., viene genera una nuova stringa, e di conseguenza anche oggetti che eleggibili per il garbagecollector. Queste sono operazioni pesanti, perciò Java ha fornito le classi StringBuffer e StringBuilder che dovrebbero essere utilizzate per la manipolazione delle stringhe. StringBuffer è thread-safe ma più lenta rispetto a StringBuilder, che non è thread-safe. "
154,"Quante stringhe vengono concretamente create dal seguente codice?
String a,b,c ; 		a = ""1234""; 		b=a; 		c=a+b;","Vengono create due stringhe, uno per a e l’altro per la concatenazione."
155,Un’interfaccia si può istanziare?,"No, una interfaccia non può essere instanziata."
156,Una interfaccia può essere estesa da un’altra interfaccia?,"Si, una interfaccia può essere estesa da un’altra interfaccia."
157,Cos’è un pattern?,"Immaginiamo di avere un problema che si ripresenta spesso, e ogni volta lo risolviamo, partendo in pratica da zero. Le prime domande che ci vengono in mente sono “perché scoprire ogni volta l’acqua calda? Perché non creare una soluzione generica che possiamo usare ogni volta che si ripresenta questo problema?”. Un pattern è proprio questo: una soluzione progettuale generale a un problema ricorrente.  Il concetto di pattern non è esclusivo dell’informatica, ma viene utilizzato in settori anche molto diversi tra loro (esempio architettura, psicologia, etc). Nell’informatica, riutilizzare modelli di progettazione noti aiuta a prevenire problemi che possono presentarsi nelle fasi successive di sviluppo e migliorano la leggibilità del codice. "
158,Che cos’è l’ereditarietà?,"Nel mondo reale classifichiamo tutto con categorie e sottocategorie. Per esempio un cane è un animale, cioè cane è una sotto categoria della categoria animale, perché ha tutte le caratteristiche di un animale e in più le particolarità di cane.  Ma, per quello che abbiamo visto, le categorie nella OOP sono rappresentate come classi, quindi ""cane"" è una sottoclasse della classe ""animale"".  L’ereditarietà è la caratteristica che mette in relazione più classi che hanno caratteristiche comuni. In Java viene realizzata tramite le parole chiavi extends e implements."
159,Quante classi può ereditare una classe?,Una classe può estendere solo una classe (o una classe astratta) e implementare quante interfacce vuole.
160,Qual è la differenza tra un oggetto Double ed double?,Double è la classe wrapper del tipo primitivo double
161,Differenza tra && e &,"L’operatore & è detto bitwise e opera sui bit. La differenza, rispetto all’operatore &&, è che vengono verificare entrambe le condizioni dell’and, a prescindere se la prima è falsa."
162,Cos'è il framework Spring?,"Spring è un framework open source che permette di sviluppare applicazioni Java. Essendo diviso in moduli, si può scegliere quali integrare nella nostra applicazione. Spring è facilmente integrabile con altri framework."
163,Quali sono gli usi del modulo AOP in Spring?,"Il modulo AOP è anche noto come modulo della programmazione orientata agli aspetti. Che vuol dire programmare ad aspetti? Aggiungere dei comportamenti (aspetti) a delle funzionalità che sono trasversali all’applicazione permettendo così di non ""contaminare"" le classi business. Esempi di cross-cutting concern (funzionalità trasversali): • Logging • Gestione delle transazioni • Etc"
164,Qual è il principale vantaggio del Principio di inversione del controllo (IOC)?,"Il principio di inversione del controllo (IOC) è alla base di Spring. Con la Dependency Injection, un programmatore deve scrivere molto meno codice. Il vantaggio più importante è che porta a diminuire l'accoppiamento all'interno degli oggetti, rendendo più facile adattare l'applicazione a nuovi requisiti."
165,Spiegare il concetto di Dependency Iniecton (DI) in Spring?,"Dependency Injection è un pattern di progettazione del software molto usato nel framework Spring. Tramite esso, gli oggetti non vengono più creati nel classico modo, cioè con la parola chiave new, ma è sufficiente descrivere a spring come crearli e poi ci penserà lui a costruirlo e restituirlo tramite  l’injecton."
166,Cos'è un Bean Spring?,"Uno Spring Bean è un semplice bean java creato e gestito da un contenitore Spring. Può esserci più di un bean in un'applicazione Spring. Ma tutti questi bean sono istanziati e assemblati dal contenitore Spring. Lo sviluppatore fornisce dei metadati di configurazione al contenitore Spring per la loro creazione e gestione del ciclo di vita. Di default uno Spring Bean è singleton, ma può ovviamente essere cambiato. "
167,Quali sono i diversi scope che un bean spring può assumere?,"Il framework Spring supporta sei tipi di scope per un Bean: singleton: questo è lo scope predefinito di un bean. In questo scope, esiste una singola istanza di oggetto di bean dentro Spring. prototype: in questo scope un bean può essere istanziato più volte. request: in questo scope, una istanza di bean rimane legata a ciclo di vita di una singola richiesta HTTP. Ogni richiesta HTTP avrà la propria istanza del bean. session: in questo scope, il bean è legata al ciclo di vita di una sessione HTTP. Ogni sessione HTTP ne avrà una istanza del bean. globalSession: questo scope, lega una singola definizione del bean al ciclo di vita di una sessione HTTP globale. È generalmente valido in un contesto di portlet. application: questo ambito limita il bean al ciclo di vita di un ServletContext. "
168,Cos’è l AOP?,"La programmazione orientata agli aspetti (Aspect-Oriented Programming o, più brevemente, AOP) rappresenta un altro modo di vedere la progettazione di un software. Al contrario della programmazione orientata sugli oggetti (Object-Oriented Programming - OOP) dove l'elemento principale è la classe, nella AOP tutto è basato sugli aspect. Che vuol dire programmare ad aspetti? Aggiungere dei comportamenti (aspetti)  a delle funzionalità che sono trasversali alla applicazione permettendo così di non ""contaminare"" le classi business. Esempi di cross-cutting concern (funzionalità trasversali): • Logging • Gestione delle transazioni"
169,Cos’è l’annotazione @RequestMapping?,"In Spring MVC, usiamo l'annotazione @RequestMapping per mappare una http request con un metodo del controller. In @RequestMapping possiamo specificare anche il tipo di http request come  GET, PUT, POST ecc."
170,Cos'è Spring Boot?,"Spring Boot è una soluzione per creare microservizi in Spring, applicazioni che possono essere eseguite autonomamente."
171,Cos'è Hibernate?,Hibernate è un popolare framework Object Relational Mapping (ORM). Aiuta a mappare le tabelle di un database relazionale in oggetti java. Hibernate fornisce anche l'implementazione dell'API Java Persistence (JPA).
172,Cos'è un ORM?,"Object Relational Mapping (ORM) è una tecnica di programmazione per mappare i dati da un database relazionale a un dominio orientato agli oggetti modello.  In  Java, la maggior parte del software è basata sulla progettazione orientata agli oggetti. Ma i dati memorizzati nei database relazionali si basano tabelle. ORM recupera i dati dal database in modo orientato agli oggetti,  riducendo lo sforzo degli sviluppatori nella scrittura di operazioni crud."
173,Cos'è  l’HQL di hibernate?,"Hibernate Query Language è anche noto come HQL. E’ simile a SQL ma è orientato agli oggetti. Le query HQL vengono tradotte da hibernate in query SQL native specifiche per un determinato db. HQL supporta anche l'esecuzione diretta di query SQL native, ma questo pero potrebbe ovviamente creare un problema nella portabilità del database."
174,Cosa sono i Criteria di Hibernate?,I criteria sono delle api di Hibernate da cui ottenere entità dal db. È un approccio molto intuitivo e semplice per effettuare query sul db.   
175,Come si può vedere il codice sql generato da hibernate?,"Per visualizzare l'SQL generato da Hibernate, dobbiamo attivare il show_sql flag. Questo può essere fatto nella configurazione Hibernate come segue: <property name = ""show_sql""> true </property> "
176,Cos’è lo stato transient di un’entità in Hibernate?,"Quando viene creata un'istanza di un entity utilizzando l'operatore new l'oggetto è nello stato transient. In questo stato, l'oggetto non ha una rappresentazione persistente nel database. Inoltre non vi è alcun identificatore assegnato ad esso."
177,Cos’è lo stato detached in Hibernate?,"Un oggetto è in stato detached quando la sessione hibernate è chiusa, e quindi non è più gestito da essa. Successivamente possiamo anche “legarlo” ad una nuova  sessione e renderlo persistente."
178,Cos’è Maven?,"Maven, prodotto della Apache Software Foundation, è uno strumento di build automation utilizzato nella gestione di progetti Java. Ossia le seguenti (principali) fasi vengono automatizzate da Maven:      • compilazione      • importazione librerie     • packaging      • esecuzione di test per garantire il funzionamento del software     • deployment sui sistemi      • documentazione relativa al progetto portato a termine.   In questo modo il carico di lavoro del programmatore viene ridotto e diminuendo le possibilità di errore da parte dello stesso. "
179,Cos’è un repository in Maven?,"Un repository è un posto dove vengono salvati le dipendenze richieste dai vari progetti. Più precisamente, Maven si basa su due tipologie di repository: remoti e locali. Il repository locale è una sorta di cache che replica solo le librerie richieste (direttamente o indirettamente) dai nostri progetti. Questo ci consente di lavorare offline fin tanto che non decidiamo di aggiungere una nuova dipendenza alla nostra applicazione. Viene creato nella propria macchina nel momento in cui installiamo Maven. Ogni volta che lanciamo la compilazione di un progetto, Maven legge dal pom.xml le dipendenze dichiarate e cerca di recuperarle prima di tutto dal repository locale. Se i jar richiesti non sono presenti localmente, Maven si collega al repository centrale (http://repo.maven.apache.org per gli USA e http://uk.maven.org/ in UK), e scarica i pacchetti nel repository locale."
180,Cos’è un archetipo in Maven?,Un archetipo è un template per creare progetti Maven con determinate caratteristiche.
181,Cos'è un POM?,POM è l'abbreviazione di Project Object Model. È un file XML con nome pom.xml. Contiene i dettagli e la configurazione utilizzati da Maven per buildare il progetto.
182,Cos'è un artefatto Maven?,"Un artefatto Maven è un file che viene deployato nel repository. Nella maggior parte dei casi si tratta di un file JAR. Quando un progetto viene buildato, Maven crea uno o più artefatti.  Ogni artefatto in Maven ha un groupID gruppo, un ID artefatto e una versione Dello stesso. Questi tre attributi identificano in modo univoco un artefatto. In Maven, specifichiamo le dipendenze di un progetto come artefatti."
183,Quali sono i diversi scope che può avere una dipendenza Maven?,"Per ogni dipendenza è possibile anche definire uno scope:     • compile (default) – le dipendenze vengono inserite nella cartella lib del progetto.     • provided – è simile a compile, ma prevede che a runtime le dipendenze siano rese  disponibili dall’ambiente di esecuzione.     • runtime – le dipendenze sono richieste solo in esecuzione     • test – le dipendenze sono richieste solo per la compilazione e l’esecuzione dei test     • system – la dipendenza non viene recuperata tramite repository, ma ne viene esplicitamente dichiarata la posizione locale"
184,Quali sono i livelli di logging?,"    • OFF: Il livello più alto possibile, viene usato per disattivare i log.     • FATAL: Errore importante che causa un prematuro termine dell'esecuzione. Ci si aspetta che questo sia visibile immediatamente all'operatore.     • ERROR: Un errore di esecuzione o una condizione imprevista. Anche questo deve essere immediatamente segnalato.     • WARN: Usato per ogni condizione inaspettata o anomalia di esecuzione, che però non necessariamente ha comportato un errore.     • INFO: Usato per segnalare eventi di esecuzione (esempio: startup/shutdown). Deve essere segnalato ma poi non mantenuto per tanto tempo.     • DEBUG: Usato nella fase di debug del programma. Viene riportato nel file di log.     • TRACE: Alcune informazioni dettagliate. Ci si aspetta che venga scritto esclusivamente nei file di log."
185,"Web Service Soap e Rest, quali sono le differenze?","SOAP:     • Può operare anche con sistemi che vanno da al di fuori del mondo web, quindi può lavorare anche con protocolli diversi dall’http.      • Presenta moduli di sicurezza incorporati, aumentandone la sicurezza.  REST, invece, è generalmente più facile da utilizzare, oltre ad essere più flessibile. Rispetto a SOAP presenta i seguenti vantaggi:     • Curva di apprendimento più piccola.     • REST che richiede l’uso di HTTP.     • Efficiente, poiché mentre SOAP utilizza XML per tutti i messaggi, REST può utilizzare formati di messaggio più piccoli.     • È veloce.     • Più vicino ad altre tecnologie Web nella filosofia di progettazione."
186,In quale cartella si trova il repository locale  di Maven?,La posizione di default è <cartella utente> .m2. Esempio: C:\Users\Pinco Pallo\.m2
187,Cos’è Json?,JSON (JavaScript Object Notation) è un formato per lo scambio di dati. E' basato su due strutture: • Un insieme di coppie nome/valore. • Un elenco ordinato di valori (array)
188,Cos’è JNDI?,JNDI è un acronimo che sta per Java Naming and Directory Interface. È un insieme di API (Application Programming Interface) che consentono di interfacciarsi con dei servizi che forniscono un oggetto in base al suo nome. 
189,Cos’è una query Sql annidata?,Una query può essere annidata all’interno di  un’altra query. Esempio di query annidata nel where: select *  from Studenti where matricola Not in (Select DISTINCT rif_matricola from Esami)  Esempio di query annidata nel from: select MAX(tot_salario) from (select SUM(salario) as tot_salario    from Lavoratori    group by settore);
190,Cos’è JPA?,"JPA  (Java Persistence API) è una specifica Java per l’accesso, la persistenza e la gestione dei dati tra oggetti Java e database relazionali"
191,Quale è il rapporto tra Jpa e Hibernate?,"Jpa è una specifica, Hibernate implementa questa specifica."
192,Quali sono i vantaggi nell’usare JPA?,"Il vantaggio offerto da JPA consiste nell’abilitare un mapping oggetti-relazioni attraverso annotazioni o XML standard, definendo come avviene il mapping tra classi Java e tabelle di un database relazionale. JPA definisce inoltre le API di un EntityManager, il cui scopo è la gestione a runtime di queries e transazioni su oggetti resi persistenti."
193,Cos’è una entity?,"E’ una normale classe Java mappata su una o più tabelle, in modo che i valori delle variabili di istanza dei suoi oggetti vengano salvati come record dall’entity manager."
194,Cos’è un ORM?,"Un ORM (Object Relational Mapping) è un sistema per mappare classi e oggetti Java su tabelle e record di un database relazionale, offrendo le operazioni di salvataggio, aggiornamento, cancellazione e recupero di oggetti/dati."
195,Cos’è l’operazione di lookup?,"In JNDI, l’operazione di ottenimento di un oggetto tramite un nome è detta lookup. Esempi di lookup sono l’invocazione di un ejb:    String jndi = ""java:jboss/exported/HelloWorldEJBSession/HelloStateless!com.HelloStatelessRemote"";    HelloStatelessRemote ee = (HelloStatelessRemote) context.lookup(jndi);   O l’invocazione di un datasource:    DataSource ds = (DataSource) new InitialContext().lookup(""java:jboss/datasources/MySqlDS""); "
196,Che cos’è un wsdl?,"Il Web Service Definition Language (WSDL) è un linguaggio basato su XML che descrive un WS, come ad esempio gli aspetti quali l'indirizzo fisico del servizio, le operazioni supportate, tipologia dei messaggi per ogni operazione. E’ una specie di carta d’identità del WS, che ci mostra, tra le altre cose, cosa fa e cosa vuole in input/output."
197,Come è composto internamente un wsdl?,"Gli elementi principali del WSDL sono:     • <types>, i tipi di dati trasmessi     • <message>, come sono composti i messaggi trasmessi     • <portType>, elenca le operazioni del WS e quali messaggi ha in input e output.     • <binding>, esprime come i messaggi SOAP vengano mappati sul protocollo di trasporto sottostante (http, smtp, etc)  e la codifica.     • <service>, mostra l’url, endpoint, dov’è il servizio è esposto."
198,Che cos’è SVN?,"Quando si deve lavorare in un team o gestire il lavoro di più persone si ha l’esigenza di “tracciare” e di avere l’ultima “working copy” ovvero la copia contenente tutte le modifiche effettuate dai vari collaboratori dall’inizio del progetto ad oggi.  Senza un sistema di version control bisognerebbe spendere tempo prezioso a farsi dare gli ultimi file modificati interpellando uno ad uno tutti i membri del team. Oltre a fornire i file modificati i membri del team dovrebbero anche rilasciare un changelog con tutte le modifiche effettuate.  Per fortuna ci vengono in aiuto i sistemi di version control (ovvero controllo di versione). Ne esistono svariati, il più famoso è SubVersion (noto anche come SVN)."
199,Cos’è una transazione?,"Una transazione è una sequenza di operazioni che, se eseguita in modo corretto, produce una variazione in una base di dati. In caso di successo, il risultato delle operazioni deve essere permanente o persistente, mentre in caso di insuccesso si deve tornare allo stato precedente all'inizio della transazione."
200,Cos’è una transazione ACID?,"Le transazioni devono avere  le seguenti proprietà dette ACID ( acronimo di Atomicity, Consistency, Isolation, e Durability):     • Atomicità: la transazione deve essere eseguita nella sua interezza;     • Consistenza: al termine della esecuzione di una transazione il database deve essere consistente, ossia non devono essere violati eventuali vincoli di integrità sui dati;     • Isolamento: ogni transazione deve essere eseguita indipendentemente dalle altre.     • Durabilità: detta anche persistenza, quando la transazione è terminata i cambiamenti prodotti non devono essere persi."
201,Cos’è un EJB Session?,"Sono oggetti che gestiscono l'elaborazione delle informazioni sul server  in maniera transazionale e sicura. Sono composti da una classe e due  interfacce. Per poter invocare un EJB Session bisogna avere una delle interfacce. Le interfacce sono dette locali o remote, in basa a dove permettono di  richiamare il session. Da remoto vengono utilizzati i protocolli distribuiti come RMI-IIOP (Remote Method Invocation o RMI è una tecnologia che consente l'invocazione remota dei metodi); Gli EJB Session sono transazionali, ossia permettono di gestire le transazioni. Esistono due tipi di session bean:     • stateful:  viene mantenuto lo stato fra una richiesta e l’altra del client, ossia tutti i campi   dell'EJB Session saranno salvati   per la successiva richiesta dello stesso client.     • stateless: non viene mantenuto alcun stato. "
202,Cos’è un Web Services?,I Web Service o servizi web sono delle funzionalità esposte da un server che possono  essere invocate da altri computer via rete e a seguito di elaborazione restituiscono un risultato. Esistono due tipi di web services: Soap e Rest.
203,Cosa sono i Datasource?,"I datasource sono uno strumento molto utile che permette di disaccoppiare la sorgente dati e le classi utilizzate per la gestione delle query SQL, permettendo cosi di non memorizzare la username e la password sui dispositivi client.   Inoltre, ottimizza l’uso delle connessioni; stabilire una connessione con una base di dati è un'operazione molto costosa, dal punto di vista delle risorse richieste. E’ necessario caricare il driver del database, stabilire una comunicazione bidirezionale sicura fra l'applicazione che deve accedere ai dati e il database stesso, eseguire una procedura di autenticazione. Il datasource risolve questo grazie al meccanismo di pooling, ossia quando un client richiede una nuova connessione se ne esiste una già disponibile si usa quella altrimenti se ne crea una nuova, fino a un certo numero massimo."
204,Cos’è un Web Service Soap?,"E’ un web service basato sul protocollo SOAP, ovvero Simple Object Access Protocol. Il protocollo SOAP (Simple Object Access Protocol) definisce un protocollo per lo scambio di messaggi tra applicazioni.  SOAP utilizza HTTP come protocollo di trasporto, ma non è limitato nè vincolato ad esso, dal momento che può benissimo usare altri protocolli di trasporto, anche se la maggior parte dei web services usano  HTTP. Un messaggio SOAP (basato sul formato xml) è strutturato da un header ed un body.  Il segmento header è facoltativo e contiene meta-informazioni quali ad esempio la sicurezza, etc. Il segmento body, invece, è obbligatorio e trasporta i dati richiesti (payload)."
205,Cos’è un web service Rest?,"Restful Web Services è un'architettura client-server stateless in cui i servizi Web sono risorse e possono essere identificati dai loro URI. Le applicazioni client REST possono utilizzare i metodi HTTP GET / POST per invocare i servizi Web Restful. REST non specifica alcun protocollo specifico da utilizzare, ma in quasi tutti i casi viene utilizzato su HTTP / HTTPS. Possiamo utilizzare XML, JSON, testo o qualsiasi altro tipo di dati per le request e response. "
206,"In sql, cosa indica la keyword count()?",La funziona count() ritorna il numero di righe selezionate. Sintassi: SELECT COUNT(column_name) FROM table_name WHERE condition;  Esempio: SELECT  COUNT(*) FROM film WHERE anno_produzione > 1990  Ritorna il numero di film prodotti dopo il 1990
207,"In Sql, cosa indica la parola chiave Max?",La funzione Max(nome_colonna) trova il Massimo valore della Colonna numerica indicata tra parentesi. Sintassi SELECT MAX(column_name) FROM table_name WHERE condition;  Esempio: SELECT  max(sale.Posti) FROM sale Restituisce la sala con maggior numero di posti
208,Quali sono i tipi di join sql più importanti?,"Esistono tre importanti tipi di JOIN:  INNER JOIN OUTER JOIN CROSS JOIN  Per comprendere le differenze tra le diverse tipologie di JOIN supponiamo di operare su un database dove abbiamo definito due tabelle denominate ""Dipendenti"" e ""Aree"". Il legame tra le due tabelle è costituito dal campo ""IdArea"" che indica l’area aziendale a cui ogni dipendente appartiene (ma non necessariamente tutti i dipendenti sono associati ad un’area aziendale come vedremo).
Inner Join Questo tipo di JOIN restituisce tutte le righe delle tabelle coinvolte in cui esista una corrispondenza tra i valori delle colonne presenti nella clausola ON.  SELECT D.IdDipendente,D.Nome,D.Cognome,A.NomeArea FROM dbo.Dipendenti D     INNER JOIN dbo.Aree A       ON A.IdArea = D.IdArea 
Con l’INNER JOIN vengono escluse quelle righe della tabella Dipendenti che non hanno una corrispondenza con la tabella Aree in base al campo specificato nella clausola ON del JOIN (quindi IdArea)

Outer Join A sua volta l’OUTER JOIN in SQL Server può essere di tre tipi:  LEFT OUTER JOIN RIGHT OUTER JOIN FULL OUTER JOIN  Questo tipo di JOIN si usa quando si desidera selezionare tutte le righe della tabella che si trova a sinistra (LEFT) o a destra (RIGHT) della clausola di JOIN o quando si desidera selezionare tutte le righe di entrambe (FULL), indipendentemente dalla corrispondenza tra i campi presenti nella clausola ON.  LEFT OUTER JOIN Nel nostro caso potremmo utilizzare questo tipo di JOIN se vogliamo ottenere id, nome, cognome e area di tutti i dipendenti indipendentemente dal fatto che essi siano assegnati effettivamente ad un’area. Per fare ciò basta sostituire nella query che abbiamo visto in precedenza alla clausola INNER JOIN la clausola LEFT OUTER JOIN  SELECT D.IdDipendente,D.Nome,D.Cognome,A.NomeArea FROM dbo.Dipendenti D     LEFT OUTER JOIN dbo.Aree A       ON A.IdArea = D.IdArea
RIGHT OUTER JOIN Supponiamo adesso di voler visualizzare il nome di tutte le aree aziendali indipendentemente dal fatto che ad esse appartengano dipendenti. Potremmo allora scrivere:  SELECT A.NomeArea,D.IdDipendente,D.Nome,D.Cognome FROM dbo.Dipendenti D     RIGHT OUTER JOIN dbo.Aree A       ON A.IdArea = D.IdArea
FULL OUTER JOIN Se invece vogliamo ottenere tutti i dati di entrambe le tabelle indipendentemente dall’esistenza di una corrispondenza tra le stesse possiamo utilizzare il FULL OUTER JOIN:  SELECT D.IdDipendente,D.Nome,D.Cognome,A.NomeArea FROM dbo.Dipendenti D     FULL OUTER JOIN dbo.Aree A       ON A.IdArea = D.IdArea
 CROSS JOIN  Questo tipo di join combina tutte le righe della tabella a sinistra con tutte le righe della tabella a destra e serve quando si desidera selezionare tutte le possibili combinazioni di righe e colonne da entrambe le tabelle. Quindi se nelle nostra tabelle abbiamo rispettivamente 6 e 4 righe il risultato di questo tipo di JOIN darà 24 righe (6x4):  SELECT D.IdDipendente,D.Nome,D.Cognome,A.NomeArea FROM dbo.Dipendenti D     CROSS JOIN dbo.Aree A"
209,Come funziona la Group By in Sql?,"Questa clausola ci permette di formare dei sottoinsiemi per le colonne specificate, in cui in genere si applicano delle operazioni matematiche.  select regista, count(*) from film group by regista;  Per ogni regista si vede il numero di film che ha fatto
"
210,Come funziona Having in Sql?,"La clausola HAVING imposta condizioni per la clausola GROUP BY secondo una modalità simile a quella dell'interazione della clausola WHERE con l'istruzione SELECT. La clausola HAVING è analoga alla clausola WHERE ma è applicabile solo ai gruppi come insieme, ossia alle righe nel set di risultati che rappresentano i gruppi, mentre la clausola WHERE è applicabile a righe singole. Una query può contenere sia una clausola WHERE che una clausola HAVING.  Esempio SELECT regista, COUNT(*) AS totale FROM film group by regista HAVING totale >1"
211,Cosa sono gli Ejb?,"Gli Enterprise JavaBean (EJB) sono i componenti software  lato server che vengono eseguiti in un container. Questo container EJB è tipicamente implementato all'interno degli application server. Forniscono numerosi servizi tra cui  tra cui la persistenza, il supporto alle transazioni, la gestione della concorrenza, della sicurezza.  Possiamo classificare gli EJB in tre categorie :     • Session bean     • Entity bean     • Message-driven bean"
212,Cos’è un MDB?,"Un Message-Driven Bean (MDB) è un componente EJB che riceve messaggi da una queue/topic, inviati da un valido client JMS.  Per crearlo è sufficiente usare l'annotation  @MessageDriven e implementare l'interfaccia MessageListener."
213,Cosa c è di simile tra ejb e spring?,Trattano entrambi i bean.
214,Spiegare il significato di comunicazione asincrona e sincrona,"Di solito le comunicazioni fra i componenti di un’applicazione sono sincrone, ossia l’oggetto che effettua la chiamata e l’oggetto che viene invocato devono essere entrambi presenti affinché la comunicazione possa avvenire, ossia devono essere sincronizzati tra di loro. Quindi colui che invoca resterà in attesa di una qualche risposta. Nella comunicazione asincrona invece il client non resta in attesa della risposta ma continua a fare le sue cose, la risposta può arrivare anche in un secondo momento. Esempio di comunicazione sincrona: La telefonata, per comunicare deve essere presenti entrambi. Esempio di comunicazione asincrona: L’email, per comunicare non è necessaria la presenza contemporanea di entrambi."
215,Come fare a non avere valori ripetuti in una colonna (non chiave primaria) di una tabella?,"I vincoli UNIQUE garantiscono che non vengano immessi valori duplicati in una colonna, o in una combinazione di colonne specifiche, che non fa parte di una chiave primaria."
216,Cosa significa JMS?,"Java Messaging Service (JMS) fornisce uno standard di accesso ai MOM che costituisce un’alternativa all’utilizzo di API proprietarie; ad eccezione di Microsoft Message Queuing, la maggior parte dei prodotti MOM infatti supporta JMS."
217,Spiegare il modello di messaging Point-To-Point,"Nello schema point to point il mittente (Producer) invia un messaggio verso una particolare destinazione. Il ricevente (Consumer) sta in ascolto e riceve i messaggi su quella destinazione(chiamata coda o queue). L’intento del producer è inviare un messaggio ad uno specifico consumer che sarà l’unico a riceverlo, anche se al momento dell’invio non è disponibile. (ci sarà solo un consumer per quella coda queue). Sarà infatti il JMS Broker (servizio che gestisce lo scambio dei messaggi) a tenerlo in coda finché non sarà prelevato dal consumer."
218,Spiegare il modello di messaging Publish-Subscribe,Nello schema publish-subscribe un singolo produttore invia un messaggio ad una destinazione ( che prende il nome di topic) e tutti i consumatori che sono registrati presso quel topic possono riceverlo. Questo modello lavora si adatta particolarmente bene nel caso in sui si voglia effettuare il broadcasting di informazioni verso diversi sistemi.
219,Qual è il ciclo di vita di un ejb session  statefull?,"Il session statefull (SF) ha tre stati, Not exist, Pronto e Passivo. Dopo un certo periodo che non arrivano chiamate viene messo in stato Passivate (sull harddisk) per liberare memoria.  E dopo un certo  timeout viene distrutto."
220,Le transazioni negli Ejb,"Esistono due distinti modi di utilizzare le transazioni in EJB.     • CMT (container-managed transaction), la transazione è gestita dal contaneir.     • BMT (bean-manager transaction), la transazione è gestita dallo sviluppatore. In una container-managed transaction, il container si occupa di iniziare la transazione ed effettuarne il commit e il rollback al posto dello sviluppatore. I confini della transazione sono marcati dall’inizio e la fine di un metodo business di un EJB. Tutto ciò che bisogna fare è dire al container come deve gestire le transazioni mediante l’uso delle annotazioni . Un esempio di annotazione è l’attributo @TransactionAttribute che serve a comunicare al container come dovrebbe gestire la transazione e può essere applicato ad un singolo metodo o all’intero bean: in quest’ultimo caso viene applicato a tutti i metodi di business. Esistono sei possibili valori per tale attributo:         ◦ Required - se esiste una transazione (tx) proveniente dal chiamante utilizza quest'ultima altrimenti ne crea una nuova. E’il comportamento di default.         ◦ RequiresNew - crea sempre una nuova tx. Se ne esiste una proveniente dal chiamante la sospende.         ◦ Mandatory - (require existing) deve esistere una tx proveniente dal chiamante altrimenti lancia eccezione.         ◦ Supports - si adatta al chiamante.         ◦ NotSupported - sempre eseguito senza tx. Se esiste una tx proveniente dal chiamante la sospende.         ◦ Never - (no pre-existing) sempre eseguito senza tx. Se esiste una tx proveniente dal chiamante lancia eccezione."
221,Quali sono gli stati di un’entity in Jpa?,"Un’entità di cui l’EntityManager tiene traccia è detta attached o managed, viceversa quando un EntityManager non gestisce  più un’entità questa è detta detached. Un’entità che non è mai stata gestita dall’EntityManager è detta transient."
222,"Differenze tra Web Server, Servlet Container e Application Server	165?","Un Web Server (come Apache HTTP Server) è un server che ha lo scopo di generare pagine statiche (contenenti solo codice HTML) e dinamiche (contenenti codice come il PHP e ASP).  Un Servlet Container (come Tomcat), è un webserver che può gestire componenti come le servlet e le Jsp (Le JSP sono in realtà delle servlet, perciò per essere eseguite hanno bisogno di un servlet container). Application Server (come JBoss) supporta tutto la tecnologia JEE, che è composto, oltre che dalla Servlet API, anche da molte altre tecnologie: Enterprise Java Beans (EJB), Java Message Service (JMS), Java Transaction API (JTA) e diverse altre."
223,Quale Ejb usa la passivazione?,"Il session statefull (SF), dopo un certo periodo che non arrivano chiamate, viene messo in stato Passivate (sull harddisk) per liberare memoria.  E dopo un certo  timeout viene distrutto."
224,Differenze tra http Post e http Get,"Con una request http GET i dati  sono inviati nel url della richiesta:  www.example.com/register.php?firstname=peter&amp;name=miller&amp;age=55&amp;gender=male  E’ un tipo di request molto semplice da gestire. Lo svantaggio principale è che i dati, essendo nel url, sono visibili a tutti, quindi abbiamo un basso livello di sicurezza. Inoltre, abbiamo un limite sulla quantità di dati che possiamo inviare, dato che nel url possiamo inserire al massimo 2000 caratteri.  Nel http request di tipo POST i dati, invece, sono inseriti nel corpo della richiesta, nascondendoli alla vista dell’utente. Inoltre non abbiamo limiti sulla quantità dei dati che possiamo inviare."
225,Cos’è una servlet?,"Una servlet è un componente software scritto in Java, gestito da un “container” (un altro software, detto servlet-container, residente in un server), che produce una risposta dinamica alle richieste di un client.    Il servlet-container (o servlet-engine) è un componente software in cui una servlet viene eseguita, seguendo il proprio ciclo di vita. Un esempio di servlet container open-source è Tomcat.
Il processo di interazione client/serlvet è:     • Il client fa una richiesta HTTP al web server     • Il web server carica la servlet (solo la prima volta) e crea un thread per eseguirla     • Il container esegue la servlet richiesta     • La servlet genera la risposta     • La risposta viene restituita al cliente"
226,Qual è il ciclo di vita di una servlet?,"Una servlet attraversa il seguente ciclo di vita:       • Load & instantiation:  il container istanzia la servlet,             ▪ Servlet MyServlet = new HttpServlet();     • Initialization: il container chiama il metodo init. Il metodo init() viene eseguito una volta soltanto per ciascuna servlet. Permette di accedere a risorse utili per la servlet, aprire connessioni ad un db, ecc… MyServlet.init(ServletConfig);     • Request Handling: il container chiama il metodo service, in cui è specificata la logica di business della servlet,             ▪ MyServlet.service(request, response);          ◦ Il metodo service(HttpServletRequest request, HttpServletResponse response) è definito in maniera tale da invocare il giusto metodo fra quelli elencati a seconda del tipo di richiesta http ricevuta (get, post ...).          ◦ HttpServletRequest request  rende accessibili i dati relativi alla richiesta inoltrata dal client;           ◦ HttpServletResponse response: in cui inserire la risposta da passare al client.     • End of service: la servelt viene distrutta dal container MyServlet.destroy(); termina solo dopo che ogni altra invocazione ha terminato la propria esecuzione. tipicamente si effettua overriding di questo metodo solo per rilasciare le risorse occupate prima che la Servlet venga distrutta. "
227,Le servlet sono thread-safe?,Le servlet non sono thread-safe. E’ possibile renderle adatte ad un contesto multithread ma questo potrebbe portare dei peggioramenti sulle prestazioni.
228,Come funziona la sum di sql?,La funzione sum(colonna) ritorna la somma della colonna di tipo numerico indicata nella parentesi. Sintassi: SELECT SUM(column_name) FROM table_name WHERE condition;  Esempio: SELECT  sum(sale.Posti) FROM sale Restituisce il totale dei posti delle sale.
229,"In Jpa, cosa significa che i dati sono in modalità fetch lazy o eager?","L’EntityManager normalmente non carica tutti i dati di una entity (quindi tutte le eventuali relazioni foreign keys) quando questa viene recuperata dal database, tale modalità è definita lazy fetching. Questo perché queste relazioni hanno una o più entità corrispondenti e quindi prelevarle tutte è costituisce un’operazione computazionalmente onerosa. Per questo vengono lette solo su richiesta. Viceversa, nella modalità eager, le relazioni vengono subito caricate.     • LAZY = fetch when needed     • EAGER = fetch immediately"
230,Un file ear può essere deployato in Tomcat?,"No, un file ear può essere deployato solo in un application server, e tomcat è un solo un servlet-container. "
231,Differenza tra Jsp e Servlet,"Una Jsp, dietro le quinte, viene trasformata anch’essa in una servlet ma la JSP, per la sua struttura formata sia da codice Java che da codice HTML, consente di poter avere una maggiore visibilità sulla parte di presentation, rispetto ad una Servlet che, invece, pur producendo anch’essa in output codice HTML, è interamente scritta in Java. "
232,Cosa significa persistenza dei dati?,"In informatica, il concetto di persistenza si riferisce alla Caratteristica dei dati di un programma di sopravvivere all'esecuzione del programma stesso che li ha creati: senza questa capacità questi infatti verrebbero salvati solo in memoria Ram venendo dunque persi allo spegnimento del computer. Questa possibilità è raggiunta salvando i dati in uno storage non volatile, come su un file system o su un database."
233,Cos’è una dipendenza di maven?,"Quanto più un progetto Java è complesso, tanto più il suo codice sorgente dipende da un numero sempre maggiore di librerie esterne. Queste librerie esterne sono chiamate, nel gergo di maven, dipendenze."
234,Cos’è lo scope di una dipendenza maven?,"Per ogni dipendenza è possibile anche definire uno scope, ossia individua in quale fase è necessaria la libreria:     • compile (default) – le dipendenze vengono inserite nella cartella lib del progetto.     • provided – è simile a compile, ma prevede che a runtime le dipendenze siano rese disponibili dall’ambiente di esecuzione.     • runtime – indica che la libreria non è necessaria per la compilazione, ma solo per l’esecuzione.     • test – le dipendenze sono richieste solo per l’esecuzione dei test     • system – la dipendenza non viene recuperata tramite repository, ma ne viene esplicitamente dichiarata la posizione locale "
235,"In svn, cosa si intende per trunk, branck e tag?","Il progetto, su svn, è suddiviso nelle directory ""trunk"", ""branches"" e ""tags"". Subversion non richiede di avere queste directory né di assegnare loro un significato speciale. Tuttavia, questa convenzione sono  molto utili.        • Trunk : l'area di sviluppo principale. È qui che si trova la  versione principale del codice con tutte le funzionalità più recenti.     • Tag : ogni volta viene rilasciata una versione ufficiale (versione finale, release candidate (RC) e beta) viene creato un tag.     • Branch :  i branch(rami) sono utilizzati per creare linee di sviluppo per più versioni dello stesso prodotto, ciò consente di eseguire correzioni di bug e creare versioni senza dover rilasciare le funzionalità più recenti,  (magari non ancora terminate o  testate).  Quando si inizia a lavorare su  un nuovo progetto si avrà una situazione del genere:  trunk /  - c’è la versione  su cui si sta sviluppando, che presto sarà 1.0 rami /  - vuoto  Una volta terminata la 1.0.0, si dirama il tronco in un nuovo ramo ""1.0"" e si crea un tag ""1.0.0"". Ora lavoriamo su ciò che alla fine sarà 1.1 continua nel bagagliaio.  trunk /  - versione di sviluppo, presto 1.1 branches / - 1.0 versione di rilascio tags /  - 1.0.0 versione di rilascio  Una volta trovati abbastanza bug (o forse un bug critico), si decide di fare una versione 1.0.1. Quindi si crea un tag ""1.0.1"" dal ramo 1.0 e rilascia il codice. A questo punto, il trunk conterrà quello che sarà 1.1 e il ramo ""1.0"" contiene il codice 1.0.1. La prossima volta che rilascerai un aggiornamento a 1.0, sarebbe 1.0.2. "
236,Si crea un wsdl dal web service o dal web service si crea il wsdl?,"Si possono adottare entrambe le soluzioni, dato un web service si può ottenere un wsdl e anche il viceversa, dal wsdl si può ottenere un web service."
237,Quanti tipi di relazioni tra tabelle db ci sono?,"In un database relazionale, le relazioni, tra tabelle, possono essere di tre tipi:      • uno a molti;     • uno a uno;     • molti a molti."
238,Cos’è una foreign key nei database?,"Per chiave esterna (foreign key) di una relazione da una tabella A a una tabella B, si intende un campo, o un insieme di campi, che è presente in entrambe le tabelle. Inoltre ogni valore di questi campi presenti nella tabella A devono essere presente nella tabella B."
239,Cos’è una chiave primaria?,"Per chiave primaria (primary key) si intende un campo, o un insieme di campi, che identifica in maniera UNIVOCA quel determinato record;"
240,E’ possibile usare jpa senza hibernate?,"Jpa è una specifica, hibernate è un jpa provider. E’ possibile usare jpa anche con un’altra implementazione che non sia hibernate."
241,Cos’è l’Inversion of Control e la Dependency Injecton (IoC) in spring?,"L’Inversion of Control (o IoC), un concetto piuttosto ampio che descrive un approccio tipico dei moderni framework: non sono più i componenti custom del progetto a richiamare gli elementi del framework, ma, viceversa, è il framework a ricercare i componenti specifici dell’applicazione e integrarli.  In questo, dunque, consiste la famosa inversione di controllo di cui tanto si parla. Il framework non è più un monolite che espone delle funzionalità predefinite, ma è un nucleo estendibile tramite logiche personalizzate, in maniera modulare.  Dipendency Injection (o DI) è invece il nome che si dà ad una delle diverse implementazioni che la Inversion of Control può avere. Per intenderci, Spring implementa la IoC tramite Dependency Injection. Chiariamo prima cosa sono le dipendenze. Una classe A si dice dipendente dalla classe B se ne usa in qualche punto i servizi offerti, ad esempio A ha al suo interno una variabile di tipo B. La  Dependency injection  prende il controllo su tutti gli aspetti di   creazione degli oggetti e delle loro dipendenze. La libreria Java Spring usa molto diffusamente la Dependency Injection con il risultato, tra le altre cose,  di eliminare dal codice applicativo ogni logica di inizializzazione.  Quindi lo sviluppatore non dovrà più preoccuparsi delle  le operazioni di creazione, inizializzazione degli oggetti ed invocazione dei metodi,  ma il framework, che reagendo a qualche ""stimolo"" se ne occuperà per suo conto."
242,"Cosa sono, e quali sono, i goals in Maven?",Un goal è una singola funzione che può essere eseguita sul progetto. I tipi di goal di forniti di default sono:     • clean: che permette di cancellare i compilati dal progetto;     • compile: che permette di compilare i file sorgenti;     • deploy: che permette di depositare il pacchetto generato nel repository remoto;     • install: che permette di depositare il pacchetto generato nel repository locale;     • site: che permette di generare la documentazione del progetto;     • archetype: che permette di generare la struttura di un progetto a partire da un template. 
243,JPA sfrutta Hibernate o Hibernate sfrutta JPA?,"Hibernate utilizza JPA, dato che lo implementa."
244,Scrivere un programma che riconosca un numero palindromo,"public static boolean verifica(int r) {
		 
		// verificare
		boolean res = false;
		String tmp = Integer.toString(r);
		int contaL = tmp.length();

		for (int i = 0; i < tmp.length(); i++) {
			char d = tmp.charAt(i);
			if (i >= contaL)
				break;
			if (d == tmp.charAt(contaL - 1)) {
				contaL--;
				res = true;
			} else {
				res = false;
				break;
			}
		}
		System.out.println(res);
		return res;
	}

	
	public static void main(String[] args) {
		verifica(1251);
	}"
245,Cos’è un MOM?,"Di solito le comunicazioni fra i componenti di un’applicazione sono sincrone, ossia l’oggetto che effettua la chiamata e l’oggetto che viene invocato devono essere entrambi presenti affinché la comunicazione possa avvenire, ossia devono essere sincronizzati tra di loro. Quindi colui che invoca resterà in attesa di una qualche risposta. Un message-oriented middleware (MOM) è un software che consente a due componenti di comunicare in maniera asincrona. Quindi colui che invoca, farà la sua invocazione e procederà senza aspettare la risposta.  Java Messaging Service (JMS) fornisce uno standard di accesso ai MOM che costituisce un’alternativa all’utilizzo di API proprietarie; ad eccezione di Microsoft Message Queuing, la maggior parte dei prodotti MOM infatti supporta JMS."
246,Fai un semplice esempio in cui è indicato l'uso di MDB?,Un esempio può essere l'invio dell'email è un esempio classico: il client (ad es. un session bean) invia una mail al server di posta (il nostro MDB) e prosegue con altre attività (comunicazione asincrona). L'invio della mail passa in carico al server che provvederà a consegnare la mail al destinatario.
247,Quali tipi di transazioni sono previsti dalla specifica EJB?,Ci sono due tipi di transazioni gestite dal container:     • Container managed (gestite dal container)      • Bean managed (gestite programmaticamente all'interno del bean).
248,Cos’è un database?,"Un database, anche detto base di dati, è un sistema in cui vengono memorizzati delle informazioni. I sistemi per la gestione dei database sono detti DBMS (DataBase Management System). Un database è strettamente legato alla definizione di modello dei dati. Un modello dei dati è un insieme di concetti utilizzati per organizzare una base di dati e descriverne la struttura.  Il modello attualmente più utilizzato è il Modello Relazionale. Esso è basato sul suddividere i dati in “relazioni”, ossia in tabelle a loro volta costituite da righe e colonne.  I sistemi di gestione di basi di dati relazionali sono detti RDBMS."
249,Differenza tra spring e JEE,JEE (dall'inglese Java 2 Enterprise Edition) è la versione enterprise della piattaforma java. E’ costituita da un insieme di specifiche che definiscono le caratteristiche e le interfacce di un insieme di tecnologie pensate per la realizzazione di applicazioni di tipo enterprise. Le tecnologie più famose sono gli ejb. Spring è un framework (composto da tantissimi moduli) sviluppato nel 2004. La motivazione alla base del framework Spring era fornire una alternativa alle complessità intrinseche di JEE e degli Enterprise Java Beans. Il nome stesso sta ad indicare la primavera dopo il buio di JEE.  
250,che cos’è “una specifica”?,Con il termine specifica si intende un requisito che il prodotto deve soddisfare. Ad esempio le specifiche JPA indicano una serie di requisiti che chiunque voglia creare un framework JPA-compliance deve soddisfare.
251,Che cos’è un container?,"Un'applicazione J2EE è formata da componenti, ovvero unità di software indipendenti (esempi di componenti sono: Java Servlet, JavaServer Pages™ ed Enterprise JavaBeans™). Queste componenti per essere eseguiti necessitano di un contaneir. Il container è una entità logica, all’interno di un server J2EE, che fornisce un ambiente di esecuzione per questi componenti. Esso fornisce i seguenti principali servizi alle componenti caricate e attive sul server:     • Gestione delle transazioni     • Gestione della sicurezza     • Gestione della persistenza dei dati     • Gestisce il ciclo di vita delle componenti  "
252,Cos’è un Plugin Maven?,Con il termine plug-in si intende dei goal riutilizzabili in tutti i progetti. Maven fornisce una grande quantità di plug-in già pronti all’uso ma esiste anche la possibilità di crearne dei propri.
253,Qual è il modo per rendere una classe Singleton thread-safe?,In Java ci sono molte opzioni per implementare un Singleton thread-safe. Il più utilizzato è rendere il metodo synchronized. ( vedi più avanti “Cos’è il pattern Singleton”
254,"In una HashMap, si può usare un tipo primitivo?","No, i tipi primitivi non possono essere usati nelle collections ma possiamo i wrapper corrispondenti."
